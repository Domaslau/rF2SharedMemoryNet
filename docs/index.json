{
  "api/rF2SharedMemoryNet.FileOperationFailType.html": {
    "href": "api/rF2SharedMemoryNet.FileOperationFailType.html",
    "title": "Enum FileOperationFailType | rF2SharedMemoryNet",
    "summary": "Enum FileOperationFailType Namespace rF2SharedMemoryNet Assembly rF2SharedMemoryNet.dll Specifies the types of failures that can occur during file operations. public enum FileOperationFailType Fields Dispose = 3 Failure occured while disposing the file. Open = 0 Failure occurred while opening the file. Parse = 2 Failure occurred while parsing the file. Read = 1 Failure occurred while reading the file. Remarks This enumeration is used to categorize the different stages at which a file operation might fail, such as opening, reading, or parsing a file. It helps in identifying the specific operation that encountered an error, allowing for more precise error handling and logging."
  },
  "api/rF2SharedMemoryNet.FileOperationFailedEventArgs.html": {
    "href": "api/rF2SharedMemoryNet.FileOperationFailedEventArgs.html",
    "title": "Class FileOperationFailedEventArgs | rF2SharedMemoryNet",
    "summary": "Class FileOperationFailedEventArgs Namespace rF2SharedMemoryNet Assembly rF2SharedMemoryNet.dll Provides data for the event that is raised when a file read operation fails. public class FileOperationFailedEventArgs : EventArgs Inheritance object EventArgs FileOperationFailedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileOperationFailedEventArgs(string, string, FileOperationFailType) Provides data for the event that is raised when a file read operation fails. public FileOperationFailedEventArgs(string dataTypeName, string errorMessage, FileOperationFailType failType) Parameters dataTypeName string The name of the data type associated with the file read operation. errorMessage string A message describing the error that occurred during the file read operation. failType FileOperationFailType The type of failure that occurred during the file operation. Properties DataTypeName Gets the name of the data type associated with the file that failed to be read. public string DataTypeName { get; } Property Value string ErrorMessage Gets the error message associated with the current operation or state. public string ErrorMessage { get; } Property Value string FailType Gets the type of failure that occurred during a file operation. public FileOperationFailType FailType { get; } Property Value FileOperationFailType"
  },
  "api/rF2SharedMemoryNet.LMUData.Models.Electronics.html": {
    "href": "api/rF2SharedMemoryNet.LMUData.Models.Electronics.html",
    "title": "Class Electronics | rF2SharedMemoryNet",
    "summary": "Class Electronics Namespace rF2SharedMemoryNet.LMUData.Models Assembly rF2SharedMemoryNet.dll Represents the electronic control settings of a vehicle, including traction control, anti-lock brakes, and engine mapping. public class Electronics Inheritance object Electronics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Used only for Le Mans Ultimate game data. This class provides data of multiple electronic assist systems. Properties AntiLockBrakes Gets or sets the status of the anti-lock braking system (ABS). public int AntiLockBrakes { get; set; } Property Value int EngineMap Gets or sets the engine map identifier. public int EngineMap { get; set; } Property Value int TractionControl Gets or sets the level of traction control applied to the vehicle. public int TractionControl { get; set; } Property Value int TractionControlCut Gets or sets the percentage of engine power reduction applied by the traction control system. public int TractionControlCut { get; set; } Property Value int TractionControlSlip Gets or sets the slip value for the traction control system. public int TractionControlSlip { get; set; } Property Value int"
  },
  "api/rF2SharedMemoryNet.LMUData.Models.html": {
    "href": "api/rF2SharedMemoryNet.LMUData.Models.html",
    "title": "Namespace rF2SharedMemoryNet.LMUData.Models | rF2SharedMemoryNet",
    "summary": "Namespace rF2SharedMemoryNet.LMUData.Models Classes Electronics Represents the electronic control settings of a vehicle, including traction control, anti-lock brakes, and engine mapping."
  },
  "api/rF2SharedMemoryNet.RF2Data.Constants.RFactor2Constants.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Constants.RFactor2Constants.html",
    "title": "Class RFactor2Constants | rF2SharedMemoryNet",
    "summary": "Class RFactor2Constants Namespace rF2SharedMemoryNet.RF2Data.Constants Assembly rF2SharedMemoryNet.dll Provides constants used for interacting with rFactor 2 shared memory and control mechanisms. public static class RFactor2Constants Inheritance object RFactor2Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains file names, layout versions, and other constants that are used for accessing rFactor 2 shared memory data and control interfaces. These constants are intended for use in applications that integrate with rFactor 2 telemetry, scoring, rules, force feedback, graphics, weather, and other systems. Fields EXTENDED_FILE_NAME Represents the name of the extended shared memory file used by rFactor2. public const string EXTENDED_FILE_NAME = \"$rFactor2SMMP_Extended$\" Field Value string Remarks This constant is used to identify the extended shared memory file for rFactor2. It is typically required when interacting with the rFactor2 simulation's shared memory system. FORCE_FEEDBACK_FILE_NAME Represents the file name used for storing force feedback data in rFactor2. public const string FORCE_FEEDBACK_FILE_NAME = \"$rFactor2SMMP_ForceFeedback$\" Field Value string Remarks This constant is used as the identifier for the shared memory file that contains force feedback information. It is specific to the rFactor2 simulation software. GRAPHICS_FILE_NAME Represents the file name used for the rFactor2 shared memory graphics data. public const string GRAPHICS_FILE_NAME = \"$rFactor2SMMP_Graphics$\" Field Value string Remarks This constant is used to identify the shared memory file containing graphics-related data for the rFactor2 simulation. HWCONTROL_FILE_NAME Represents the file name used for hardware control in rFactor2 Shared Memory Plugin. public const string HWCONTROL_FILE_NAME = \"$rFactor2SMMP_HWControl$\" Field Value string Remarks This constant is used as a key or identifier for hardware control operations within the rFactor2 Shared Memory Plugin. HWCONTROL_LAYOUT_VERSION Represents the version number of the hardware control layout. public const int HWCONTROL_LAYOUT_VERSION = 1 Field Value int Remarks This constant is used to identify the version of the hardware control layout configuration. It can be used for compatibility checks or version-specific operations. MAX_HWCONTROL_NAME_LEN Represents the maximum length, in characters, for hardware control names. public const int MAX_HWCONTROL_NAME_LEN = 96 Field Value int Remarks This constant defines the upper limit for the length of hardware control name strings. It can be used to validate input or ensure compatibility with systems that enforce this limit. MAX_MAPPED_IDS Represents the maximum number of IDs that can be mapped. public const int MAX_MAPPED_IDS = 512 Field Value int Remarks This constant defines the upper limit for the number of IDs that can be mapped in operations or configurations that rely on ID mapping. It is intended to ensure consistency and prevent exceeding predefined limits. MAX_MAPPED_VEHICLES Represents the maximum number of vehicles that can be mapped. public const int MAX_MAPPED_VEHICLES = 128 Field Value int Remarks This constant defines the upper limit for the number of vehicles that can be tracked or processed in a mapping operation. It is intended to ensure consistent behavior and prevent exceeding system capacity. MAX_RULES_INSTRUCTION_MSG_LEN Represents the maximum length, in characters, of a rules instruction message. public const int MAX_RULES_INSTRUCTION_MSG_LEN = 96 Field Value int Remarks This constant defines the upper limit for the length of instruction messages related to rules. Messages exceeding this length may need to be truncated or handled appropriately. MAX_STATUS_MSG_LEN Represents the maximum length, in characters, allowed for a status message. public const int MAX_STATUS_MSG_LEN = 128 Field Value int Remarks This constant can be used to enforce a limit on the length of status messages in applications where message size constraints are required. PITINFO_FILE_NAME Represents the file name used for storing pit information in rFactor2 Shared Memory Map. public const string PITINFO_FILE_NAME = \"$rFactor2SMMP_PitInfo$\" Field Value string Remarks This constant is used as the identifier for the pit information file in the rFactor2 simulation. It is intended for use in applications interfacing with rFactor2's shared memory system. PLUGIN_CONTROL_FILE_NAME Represents the name of the plugin control file used by the rFactor2 Shared Memory Plugin. public const string PLUGIN_CONTROL_FILE_NAME = \"$rFactor2SMMP_PluginControl$\" Field Value string Remarks This constant defines the file name that the rFactor2 Shared Memory Plugin uses for control operations. It is intended for use in scenarios where interaction with the plugin's control mechanisms is required. PLUGIN_CONTROL_LAYOUT_VERSION Represents the version number of the plugin control layout. public const int PLUGIN_CONTROL_LAYOUT_VERSION = 1 Field Value int Remarks This constant is used to identify the version of the plugin control layout. It can be used for compatibility checks or version-specific behavior. RULES_CONTROL_FILE_NAME Represents the name of the control file used for managing rules in the rFactor2 Shared Memory Plugin. public const string RULES_CONTROL_FILE_NAME = \"$rFactor2SMMP_RulesControl$\" Field Value string Remarks This constant is used as a key or identifier for the rules control file in the rFactor2 Shared Memory Plugin. It is intended for internal use or integration scenarios where the plugin requires a specific file name. RULES_CONTROL_LAYOUT_VERSION Represents the version number for the control layout rules. public const int RULES_CONTROL_LAYOUT_VERSION = 1 Field Value int Remarks This constant is used to identify the version of the control layout rules. It can be used for compatibility checks or version-specific logic. RULES_FILE_NAME The default file name used for storing rFactor2 shared memory plugin rules. public const string RULES_FILE_NAME = \"$rFactor2SMMP_Rules$\" Field Value string Remarks This constant represents the file name used by the rFactor2 shared memory plugin to manage rules. It is intended for use in scenarios where the plugin requires a predefined file name for rule storage. SCORING_FILE_NAME Represents the default file name used for scoring in the rFactor2 Shared Memory Plugin. public const string SCORING_FILE_NAME = \"$rFactor2SMMP_Scoring$\" Field Value string Remarks This constant is used as the identifier for the scoring file in the rFactor2 Shared Memory Plugin. It is intended for use in scenarios where scoring data needs to be accessed or manipulated. TELEMETRY_FILE_NAME Represents the default file name used for telemetry data in rFactor2. public const string TELEMETRY_FILE_NAME = \"$rFactor2SMMP_Telemetry$\" Field Value string Remarks This constant is typically used to identify the telemetry file when interacting with the rFactor2 simulation. WEATHER_CONTROL_FILE_NAME Represents the file name used for weather control in rFactor2 shared memory. public const string WEATHER_CONTROL_FILE_NAME = \"$rFactor2SMMP_WeatherControl$\" Field Value string Remarks This constant is used to identify the weather control file in the rFactor2 simulation environment. It is intended for use in shared memory operations related to weather settings. WEATHER_CONTROL_LAYOUT_VERSION Represents the version number of the weather control layout. public const int WEATHER_CONTROL_LAYOUT_VERSION = 1 Field Value int Remarks This constant is used to identify the current version of the weather control layout. It can be used for compatibility checks or version-specific logic. WEATHER_FILE_NAME Represents the default file name used for storing weather data in the rFactor2 Shared Memory Plugin. public const string WEATHER_FILE_NAME = \"$rFactor2SMMP_Weather$\" Field Value string Remarks This constant is used as the identifier for the weather-related shared memory file. It is intended for use in applications interfacing with the rFactor2 simulation environment."
  },
  "api/rF2SharedMemoryNet.RF2Data.Constants.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Constants.html",
    "title": "Namespace rF2SharedMemoryNet.RF2Data.Constants | rF2SharedMemoryNet",
    "summary": "Namespace rF2SharedMemoryNet.RF2Data.Constants Classes RFactor2Constants Provides constants used for interacting with rFactor 2 shared memory and control mechanisms."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.BoostMotorState.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.BoostMotorState.html",
    "title": "Enum BoostMotorState | rF2SharedMemoryNet",
    "summary": "Enum BoostMotorState Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the operational state of a motor in a boost system. public enum BoostMotorState Fields Inactive = 1 Inactive state indicates that the motor is not currently engaged in any operation. Propulsion = 2 Propulsion state indicates that the motor is actively providing propulsion power. Regeneration = 3 Boost motor is regenerating energy. Unavailable = 0 Unavailable state indicates that the motor is not operational or not present. Remarks This enumeration defines the possible states of a motor, including whether it is unavailable, inactive, providing propulsion, or performing regeneration. Use this to determine the current state of the motor in the system."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.ControlEntity.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.ControlEntity.html",
    "title": "Enum ControlEntity | rF2SharedMemoryNet",
    "summary": "Enum ControlEntity Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the control type for an entity in the RF2 simulation environment. public enum ControlEntity Fields AI = 1 AI is in control. Nobody = -1 Nobody controls the vehicle. This value should not be available in normal conditions. Player = 0 Player is in control. Remote = 2 Remote player is in control. Replay = 3 Replay is in control. Should not be available in normal conditions. Remarks This enumeration is used to specify the control mechanism for an entity, such as whether it is controlled by a player, AI, or other systems."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.CountLapFlag.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.CountLapFlag.html",
    "title": "Enum CountLapFlag | rF2SharedMemoryNet",
    "summary": "Enum CountLapFlag Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Specifies the behavior for counting laps and recording lap times in a racing simulation. public enum CountLapFlag Fields CountLapAndTime = 2 Count the lap and record the time CountLapButNotTime = 1 Count the lap but do not record the time DoNotCountLap = 0 Do not count the lap and do not record the time. Remarks This enumeration is used to define whether a lap should be counted and whether the lap time should be recorded. It is typically used in scenarios where lap counting and timing need to be controlled based on specific conditions."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.DentSeverity.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.DentSeverity.html",
    "title": "Enum DentSeverity | rF2SharedMemoryNet",
    "summary": "Enum DentSeverity Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the severity levels of RF2 denting. public enum DentSeverity Fields More = 2 Major denting None = 0 No denting Some = 1 Minor denting Remarks This enumeration is used to categorize the extent of denting in RF2 components. The values range from no denting to increasing levels of severity."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.FinishStatus.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.FinishStatus.html",
    "title": "Enum FinishStatus | rF2SharedMemoryNet",
    "summary": "Enum FinishStatus Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the finish status of a participant in an RF2 event. public enum FinishStatus Fields Dnf = 2 Did not finish the event. (DNF) Dq = 3 Disqualified from the event. (DQ) Finished = 1 Finished the event. None = 0 Not finished yet. Remarks This enumeration is used to indicate the outcome of a participant's performance in an RF2 event. Possible values include: NoneNo finish status is assigned. FinishedThe participant successfully completed the event. DnfThe participant did not finish the event. DqThe participant was disqualified from the event."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.GameMode.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.GameMode.html",
    "title": "Enum GameMode | rF2SharedMemoryNet",
    "summary": "Enum GameMode Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Specifies the mode of operation for a game instance. public enum GameMode Fields Client = 2 Represents the client role in RF2 Server = 1 Represents a server role in RF2 ServerAndClient = 3 Specifies that the connection operates in both server and client modes. Remarks This enumeration defines whether the game instance operates as a server, a client, or both. Use this to configure the behavior of the game based on its role in the network."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.GamePhase.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.GamePhase.html",
    "title": "Enum GamePhase | rF2SharedMemoryNet",
    "summary": "Enum GamePhase Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the various phases of a racing session in rFactor2. public enum GamePhase Fields Countdown = 4 Countdown to start Formation = 3 Formation lap FullCourseYellow = 6 Full course yellow flag Garage = 0 In Garage GreenFlag = 5 Green flag GridWalk = 2 Grid walk PausedOrHeartbeat = 9 Paused or heartbeat phase. SessionOver = 8 Session is over SessionStopped = 7 Session has stopped, e.g. due to a crash or manual stop UnderBlueFlag = 11 Under blue flag conditions UnderYellowFlag = 10 Under yellow flag conditions WarmUp = 1 Warm-up phase Remarks This enumeration defines the distinct stages of a racing session, such as preparation, active racing, and post-session states. Use these values to determine the current phase of the session or to handle specific logic based on the session's state."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.IgnitionStarterStatus.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.IgnitionStarterStatus.html",
    "title": "Enum IgnitionStarterStatus | rF2SharedMemoryNet",
    "summary": "Enum IgnitionStarterStatus Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the status of the ignition and starter in an RF2 system. public enum IgnitionStarterStatus Fields Ignition = 1 Only ignition is on IgnitionAndStarter = 2 Ignition and starter are both on Off = 0 Both off Remarks This enumeration is used to indicate the current state of the ignition and starter mechanism. The values correspond to distinct operational states, such as when the ignition is off, when the ignition is active, or when both the ignition and starter are engaged."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.MemoryFile.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.MemoryFile.html",
    "title": "Enum MemoryFile | rF2SharedMemoryNet",
    "summary": "Enum MemoryFile Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the various files or views available in the application. public enum MemoryFile Fields Extended = 7 Extended information file FFB = 3 Force Feedback (FFB) file Graphics = 4 Graphics file HWControl = 8 Hardware control file PitInfo = 5 Pit information file PluginControl = 11 Plugin control file Rules = 2 Rules file RulesControl = 10 Rules control file Scoring = 1 Scoring file Telemetry = 0 Telemetry file Weather = 6 Weather file WeatherControl = 9 Weather control file Remarks Each value in the MemoryFile enumeration corresponds to a specific functional area or display within the application. Use this enumeration to specify or identify the active file."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.PitState.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.PitState.html",
    "title": "Enum PitState | rF2SharedMemoryNet",
    "summary": "Enum PitState Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the various states of a pit stop in rFactor 2. public enum PitState Fields Entering = 2 Entering the pit area Exiting = 4 Exiting the pit area None = 0 No pit activity Request = 1 Requeted pit stop Stopped = 3 Stopped in the pit area Remarks This enumeration defines the progression of a pit stop, from no pit activity to requesting, entering, stopping, and exiting the pit. It is typically used to track or manage the pit stop state during a race simulation."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.PitsOpen.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.PitsOpen.html",
    "title": "Enum PitsOpen | rF2SharedMemoryNet",
    "summary": "Enum PitsOpen Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll PitsOpen status public enum PitsOpen Fields Closed = 2 Closed pits, cannot enter. Open = 3 Open pits, can enter. SetClose = 0 Set pits to close SetOpen = 1 Set pits to open"
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.PrimaryFlags.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.PrimaryFlags.html",
    "title": "Enum PrimaryFlags | rF2SharedMemoryNet",
    "summary": "Enum PrimaryFlags Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the primary flag colors used in the RF2 system. public enum PrimaryFlags Fields Blue = 6 Blue flag Green = 0 Green flag, indicating a normal racing condition. Remarks This enumeration defines specific flag colors and their associated values. Use this type to specify or interpret flag states within the RF2 system."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.RearFlapLegalStatus.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.RearFlapLegalStatus.html",
    "title": "Enum RearFlapLegalStatus | rF2SharedMemoryNet",
    "summary": "Enum RearFlapLegalStatus Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the legal status of the RF2 rear flap in a racing context. public enum RearFlapLegalStatus Fields Alllowed = 2 Allowed to use the rear flap. DetectedButNotAllowedYet = 1 Detected but not allowed yet. Disallowed = 0 Not allowed to use the rear flap. Remarks This enumeration is typically used to indicate whether the rear flap is allowed to be activated during a race, based on the current conditions and regulations."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.SafetyCarInstruction.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.SafetyCarInstruction.html",
    "title": "Enum SafetyCarInstruction | rF2SharedMemoryNet",
    "summary": "Enum SafetyCarInstruction Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the instructions that can be issued to the safety car in rFactor 2. public enum SafetyCarInstruction Fields GoActive = 1 Activate the safety car. HeadForPits = 2 Heading for the pits, typically to end the safety car period. NoChange = 0 No change in safety car status; Remarks This enumeration defines the possible states or commands for the safety car during a race. It is typically used to control the behavior of the safety car in response to race events."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.Sector.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.Sector.html",
    "title": "Enum Sector | rF2SharedMemoryNet",
    "summary": "Enum Sector Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the sectors of a racing track as defined in the rFactor 2 simulation. public enum Sector Fields Sector1 = 1 Sector 1 Sector2 = 2 Sector 2 Sector3 = 0 Sector 3, last sector of the track. Remarks The sectors are numbered sequentially, with Sector1 representing the first sector, Sector2 the second sector, and Sector3 the third sector. This enumeration is commonly used to identify specific track segments in telemetry or timing data."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.SurfaceType.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.SurfaceType.html",
    "title": "Enum SurfaceType | rF2SharedMemoryNet",
    "summary": "Enum SurfaceType Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the type of surface in the rFactor 2 simulation environment. public enum SurfaceType Fields Dirt = 3 Dirt surface Dry = 0 Dry surface Grass = 2 Grass surface Gravel = 4 Gravel surface Kerb = 5 Kerb Special = 6 Special surface type Wet = 1 Wet surface Remarks This enumeration is used to classify different surface types encountered in the simulation. Surface types can affect vehicle behavior, such as grip and handling."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.TrackRulesColumn.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.TrackRulesColumn.html",
    "title": "Enum TrackRulesColumn | rF2SharedMemoryNet",
    "summary": "Enum TrackRulesColumn Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the various lane options and states used in RF2 track rules. public enum TrackRulesColumn Fields FreeChoice = 6 Free choice lane state Invalid = 5 Invalid lane state LeftLane = 0 Left lane MaxLanes = 5 Maximum number of static lane choices. Maximum = 8 Represents the maximum number of track rules columns defined. MidLefLane = 1 Mid-left lane MiddleLane = 2 Middle lane MidrRghtLane = 3 Mid-right lane Pending = 7 Pending lane state RightLane = 4 Right lane Remarks This enumeration defines both static lane choices (e.g., LeftLane, MiddleLane) and dynamic states (e.g., FreeChoice, Pending). It is primarily used to specify lane assignments and track rule states for participants."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.TrackRulesCommand.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.TrackRulesCommand.html",
    "title": "Enum TrackRulesCommand | rF2SharedMemoryNet",
    "summary": "Enum TrackRulesCommand Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the set of commands used to manage vehicle behavior and penalties during a full-course yellow in RF2. public enum TrackRulesCommand Fields AddFromPit = 1 Exited pit during full-course yellow AddFromTrack = 0 Crossed s/f line for first time after full-course yellow was called AddFromUndq = 2 During a full-course yellow, the admin reversed a disqualification LongestTime = 8 Misbehavior during full-course yellow, resulting in the penalty of being moved to the back of the longest line Maximum = 9 Maximum number of commands defined. MoveToBack = 7 Misbehavior during full-course yellow, resulting in the penalty of being moved to the back of their current line RemoveToDnf = 4 Vehicle DNF'd during full-course yellow RemoveToDq = 5 Vehicle DQ'd during full-course yellow RemoveToPit = 3 Entered pit during full-course yellow RemoveToUnloaded = 6 Vehicle unloaded (possibly kicked out or banned) during full-course yellow Remarks This enumeration defines commands for adding, removing, or penalizing vehicles based on their actions during a full-course yellow. Commands are typically used to enforce race rules and manage vehicle states."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.TrackRulesStage.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.TrackRulesStage.html",
    "title": "Enum TrackRulesStage | rF2SharedMemoryNet",
    "summary": "Enum TrackRulesStage Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the various stages of track rules in a racing simulation. public enum TrackRulesStage Fields CautionInit = 3 Initialization of a full-course yellow. CautionUpdate = 4 Update of a full-course yellow. FormationInit = 0 Initialization of the formation lap. FormationUpdate = 1 Update of the formation lap. Maximum = 5 Maximum number of stages. Normal = 2 Normal update Remarks This enumeration defines the distinct phases of track rules, including formation laps, normal racing, and caution periods. It is primarily used to manage and update the state of the race based on the current track conditions."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.WheelIndex.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.WheelIndex.html",
    "title": "Enum WheelIndex | rF2SharedMemoryNet",
    "summary": "Enum WheelIndex Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the index of a wheel on a vehicle in rFactor 2. public enum WheelIndex Fields FrontLeft = 0 Front-left wheel FrontRight = 1 Front-right wheel RearLeft = 2 Rear-left wheel RearRight = 3 Rear-right wheel Remarks This enumeration is used to identify specific wheels on a vehicle, such as the front-left or rear-right. The values correspond to the zero-based index of the wheel."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.YellowFlagOveride.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.YellowFlagOveride.html",
    "title": "Enum YellowFlagOveride | rF2SharedMemoryNet",
    "summary": "Enum YellowFlagOveride Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Specifies the override behavior for the yellow flag state. public enum YellowFlagOveride Fields ClearYellowFlag = 2 Clear the yellow flag state. No = 0 Do not overide the yellow flag state. Yes = 1 Overide the yellow flag state. Remarks This enumeration is used to control whether the yellow flag state is overridden, cleared, or left unchanged."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.YellowFlagState.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.YellowFlagState.html",
    "title": "Enum YellowFlagState | rF2SharedMemoryNet",
    "summary": "Enum YellowFlagState Namespace rF2SharedMemoryNet.RF2Data.Enums Assembly rF2SharedMemoryNet.dll Represents the various states of a yellow flag during a race. public enum YellowFlagState Fields Invalid = -1 Invalid state, used for error handling or uninitialized values. LastLap = 5 Last lap of Yellow Flag NoYellowFlag = 0 Normal racing conditions without any yellow flag. PendingYellowFlag = 1 Pending yellow flag state, indicating that a yellow flag condition is about to be applied. PitLeadLap = 3 Lead allowed to pit PitsClosed = 2 Pits are closed, typically during a yellow flag condition to prevent pit stops. PitsOpen = 4 Pits are open, allowing vehicles to enter the pits during a yellow flag condition. RaceHalt = 7 Race is halted ResumeRacing = 6 Resume racing after a yellow flag condition has been cleared or resolved. Remarks The YellowFlagState enum defines the progression of states that occur during a yellow flag scenario. These states are used to manage race conditions, such as closing pits, opening pits, and resuming racing."
  },
  "api/rF2SharedMemoryNet.RF2Data.Enums.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Enums.html",
    "title": "Namespace rF2SharedMemoryNet.RF2Data.Enums | rF2SharedMemoryNet",
    "summary": "Namespace rF2SharedMemoryNet.RF2Data.Enums Enums BoostMotorState Represents the operational state of a motor in a boost system. ControlEntity Represents the control type for an entity in the RF2 simulation environment. CountLapFlag Specifies the behavior for counting laps and recording lap times in a racing simulation. DentSeverity Represents the severity levels of RF2 denting. FinishStatus Represents the finish status of a participant in an RF2 event. GameMode Specifies the mode of operation for a game instance. GamePhase Represents the various phases of a racing session in rFactor2. IgnitionStarterStatus Represents the status of the ignition and starter in an RF2 system. MemoryFile Represents the various files or views available in the application. PitState Represents the various states of a pit stop in rFactor 2. PitsOpen PitsOpen status PrimaryFlags Represents the primary flag colors used in the RF2 system. RearFlapLegalStatus Represents the legal status of the RF2 rear flap in a racing context. SafetyCarInstruction Represents the instructions that can be issued to the safety car in rFactor 2. Sector Represents the sectors of a racing track as defined in the rFactor 2 simulation. SurfaceType Represents the type of surface in the rFactor 2 simulation environment. TrackRulesColumn Represents the various lane options and states used in RF2 track rules. TrackRulesCommand Represents the set of commands used to manage vehicle behavior and penalties during a full-course yellow in RF2. TrackRulesStage Represents the various stages of track rules in a racing simulation. WheelIndex Represents the index of a wheel on a vehicle in rFactor 2. YellowFlagOveride Specifies the override behavior for the yellow flag state. YellowFlagState Represents the various states of a yellow flag during a race."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.ExtendedTelemetry.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.ExtendedTelemetry.html",
    "title": "Struct ExtendedTelemetry | rF2SharedMemoryNet",
    "summary": "Struct ExtendedTelemetry Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the extended data structure for rFactor 2, providing detailed information about the simulation state, session transitions, plugin configurations, and various control inputs. public struct ExtendedTelemetry Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to capture and expose extended simulation data for rFactor 2, including session timing, plugin states, damage tracking, and control input buffers. It is primarily intended for advanced integrations and plugins interacting with the rFactor 2 API. The structure includes fields for session timing, plugin-specific data, and direct memory access flags, among others. Some fields, such as SCRPluginEnabled and SCRPluginDoubleFileType, are specific to the Stock Car Rules plugin. Note that certain fields, such as UnsubscribedBuffersMask, may be writable by clients in future API updates. Fields CurrentPitSpeedLimit Represents the current pit speed limit in meters per second. public float CurrentPitSpeedLimit Field Value float DirectMemoryAccessEnabled Indicates whether direct memory access is enabled. public byte DirectMemoryAccessEnabled Field Value byte DisplayedMessageUpdateCapture Represents a byte array used to store the displayed message update capture. public byte[] DisplayedMessageUpdateCapture Field Value byte[] Remarks The array has a fixed size of 128 bytes. HWControlInputEnabled HWControl input buffer is enabled. public byte HWControlInputEnabled Field Value byte InRealtimeFC Represents the current state of the system in real-time mode. public byte InRealtimeFC Field Value byte Is64bit Is 64bit plugin? public byte Is64bit Field Value byte LSIOrderInstructionMessage Represents the order instruction message for a specific rule set. public byte[] LSIOrderInstructionMessage Field Value byte[] Remarks Array is fixed in size, defined by MAX_RULES_INSTRUCTION_MSG_LEN. LSIPhaseMessage Represents a message used in the LSI phase, stored as a fixed-length array of bytes. public byte[] LSIPhaseMessage Field Value byte[] Remarks The array is marshaled as a fixed-size buffer with a length defined by MAX_RULES_INSTRUCTION_MSG_LEN. This member is typically used for interop scenarios where a fixed-size buffer is required. LSIPitStateMessage Represents a message containing pit state information for LSIs (Local Shared Instructions). public byte[] LSIPitStateMessage Field Value byte[] Remarks The message is stored as a fixed-length byte array with a maximum size defined by MAX_RULES_INSTRUCTION_MSG_LEN. LSIRulesInstructionMessage Represents a fixed-size array of bytes containing the rules instruction message. public byte[] LSIRulesInstructionMessage Field Value byte[] Remarks The array is marshaled as a fixed-size buffer with a length defined by MAX_RULES_INSTRUCTION_MSG_LEN. This member is typically used for interop scenarios where a specific buffer size is required. LastHistoryMessage Represents the last history message received, stored as a byte array. public byte[] LastHistoryMessage Field Value byte[] Remarks The array is fixed in size, defined by MAX_STATUS_MSG_LEN. MultimediaThreadStarted Indicates whether the multimedia thread has started. public byte MultimediaThreadStarted Field Value byte Physics Represents the physics options for the session. public PhysicsOptions Physics Field Value PhysicsOptions Remarks This property contains configuration settings related to the physics engine. The options are updated at the start of each session. PluginControlInputEnabled Plugin control input buffer is enabled. public byte PluginControlInputEnabled Field Value byte RulesControlInputEnabled RulesControl input buffer is enabled. public byte RulesControlInputEnabled Field Value byte SCRPluginDoubleFileType Stock Car Rules plugin DoubleFileType value, only meaningful if mSCRPluginEnabled is true. public int SCRPluginDoubleFileType Field Value int SCRPluginEnabled Stock Car Rules plugin is enabled. public byte SCRPluginEnabled Field Value byte SessionStarted Indicates whether a session has started. public byte SessionStarted Field Value byte SessionTransitionCapture Represents the session transition capture for RF2, containing partial internal data captured during session transitions. public SessionTransitionCapture SessionTransitionCapture Field Value SessionTransitionCapture SimulationThreadStarted Indicates whether the simulation thread has started. public byte SimulationThreadStarted Field Value byte StatusMessage Represents a status message as a fixed-length array of bytes. public byte[] StatusMessage Field Value byte[] Remarks The array is marshaled as a fixed-size buffer with a length defined by MAX_STATUS_MSG_LEN. This member is typically used for interop scenarios where a fixed-size buffer is required. TicksLSIOrderInstructionMessageUpdated Represents the timestamp, in ticks, of the last update to the LSI order instruction message. public long TicksLSIOrderInstructionMessageUpdated Field Value long TicksLSIPhaseMessageUpdated Represents the timestamp, in ticks, of when the last LSI phase message was updated. public long TicksLSIPhaseMessageUpdated Field Value long TicksLSIPitStateMessageUpdated Represents the timestamp, in ticks, when the last LSI pit state message was updated. public long TicksLSIPitStateMessageUpdated Field Value long TicksLSIRulesInstructionMessageUpdated Represents the timestamp, in ticks, of the last update to the FCY rules instruction message. public long TicksLSIRulesInstructionMessageUpdated Field Value long TicksLastHistoryMessageUpdated Represents the timestamp, in ticks, when the last message history was updated. public long TicksLastHistoryMessageUpdated Field Value long TicksSessionEnded Represents the timestamp, in ticks, when the session ended. public long TicksSessionEnded Field Value long TicksSessionStarted Represents the timestamp, in ticks, when the session started. public long TicksSessionStarted Field Value long TicksStatusMessageUpdated Represents the timestamp, in ticks, when the status message was last updated. public long TicksStatusMessageUpdated Field Value long TrackedDamages Represents an array of tracked damage information for RF2 entities. public TrackedDamage[] TrackedDamages Field Value TrackedDamage[] Remarks The array is fixed in size, determined by MAX_MAPPED_IDS. Each element in the array corresponds to a specific tracked damage instance. UnsubscribedBuffersMask Currently active UnsbscribedBuffersMask value. This will be allowed for clients to write to in the future, but not yet. public int UnsubscribedBuffersMask Field Value int Version API version public byte[] Version Field Value byte[] VersionUpdateBegin Incremented right before buffer is written to. public uint VersionUpdateBegin Field Value uint VersionUpdateEnd Incremented after buffer write is done. public uint VersionUpdateEnd Field Value uint WeatherControlInputEnabled WeatherControl input buffer is enabled. public byte WeatherControlInputEnabled Field Value byte"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.ForceFeedback.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.ForceFeedback.html",
    "title": "Struct ForceFeedback | rF2SharedMemoryNet",
    "summary": "Struct ForceFeedback Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the force feedback data structure used in rFactor 2. public struct ForceFeedback Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure provides information about the current force feedback value and versioning updates for synchronization purposes. The version update fields are incremented before and after the buffer is written to, ensuring consistency when accessing the data. Fields ForceValue Represents the current force feedback (FFB) value reported by the InternalsPlugin. public double ForceValue Field Value double Remarks This value indicates the magnitude of the force feedback effect at a given moment. It is typically used in applications that interact with force feedback devices, such as steering wheels. VersionUpdateBegin Represents the version number of the buffer at the point when an update begins. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update. It can be used to track changes or ensure consistency during buffer operations. VersionUpdateEnd Represents the version update counter that is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field can be used to track the completion of buffer write operations. Each time a buffer write is finalized, the value of this counter is incremented."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.Graphics.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.Graphics.html",
    "title": "Struct Graphics | rF2SharedMemoryNet",
    "summary": "Struct Graphics Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the graphics data structure used in rFactor 2, containing versioning information and detailed graphics settings. public struct Graphics Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is primarily used to store and transfer graphics-related information, including version update ranges and detailed graphics settings. It is designed for interoperability with unmanaged code, using sequential layout and ANSI character set. Fields GraphicsInfo Represents the graphics information for the RF2 simulation. public GraphicsInfo GraphicsInfo Field Value GraphicsInfo Remarks This field contains details about the graphical settings or state of the RF2 simulation. It may include information such as resolution, rendering settings, or other graphical parameters. VersionUpdateBegin Represents the version number at which an update process begins. public uint VersionUpdateBegin Field Value uint VersionUpdateEnd Represents the version number at the end of an update process. public uint VersionUpdateEnd Field Value uint"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.GraphicsInfo.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.GraphicsInfo.html",
    "title": "Struct GraphicsInfo | rF2SharedMemoryNet",
    "summary": "Struct GraphicsInfo Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents graphical information related to the rFactor 2 simulation, including camera position, orientation, ambient lighting, and other visual settings. public struct GraphicsInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure provides data about the current graphical state of the simulation, such as the camera's position and orientation, ambient lighting colors, and the slot ID being viewed. It also includes information about the camera type, which can be used to determine or set the current camera view. Some fields, such as Expansion, are reserved for future use. Fields AmbientBlue Represents the intensity of the ambient blue color component in the lighting system. public double AmbientBlue Field Value double Remarks This field is typically used to control the blue channel of ambient light in rendering or graphical applications. The value should be within a valid range for color intensity, typically between 0.0 and 1.0, where 0.0 represents no blue light and 1.0 represents full intensity. AmbientGreen Represents the green component of ambient light intensity. public double AmbientGreen Field Value double Remarks This field is typically used in graphics or lighting calculations to define the green channel of ambient light. The value should be in a range appropriate for the specific application, such as 0.0 to 1.0 for normalized intensity or another range depending on the context. AmbientRed Represents the red component of the ambient color in a lighting system. public double AmbientRed Field Value double Remarks This field is typically used to define the intensity of the red channel for ambient lighting. Values should generally be in the range of 0.0 to 1.0, where 0.0 represents no red light and 1.0 represents full intensity. CamOri Represents the rows of an orientation matrix for the camera. public Vec3[] CamOri Field Value Vec3[] Remarks This array contains three elements, each representing a row of the orientation matrix. The matrix can be used to describe the camera's orientation in 3D space. For conversions, consider using TelemQuat utilities to transform the data into quaternion format. CamPos Represents the position of the camera in 3D space. public Vec3 CamPos Field Value Vec3 Remarks This field stores the camera's position as a 3D vector. It can be used to determine or modify the camera's location in the scene. CameraType Represents the type of camera view in a racing simulation environment. public int CameraType Field Value int Remarks The camera type determines the perspective from which the simulation is viewed. Values outside the defined range may not be supported. 0 = TV cockpit 1 = cockpit 2 = nosecam 3 = swingman 4 = trackside (nearest) 5 = onboard000 : : 1004 = onboard999 1005+ = (currently unsupported, in the future may be able to set/get specific trackside camera) Expansion Reserved for future use. public byte[] Expansion Field Value byte[] HWND Represents the application handle as an array of bytes. public byte[] HWND Field Value byte[] Id Represents the slot ID currently being viewed. public int Id Field Value int"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.HardwareControl.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.HardwareControl.html",
    "title": "Struct HardwareControl | rF2SharedMemoryNet",
    "summary": "Struct HardwareControl Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents a hardware control structure used for communication between rFactor 2 and external systems. public struct HardwareControl Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is designed to facilitate data exchange with hardware control systems in rFactor 2. It includes versioning fields to track updates, a layout version identifier, a control name, and a return value. The VersionUpdateBegin and VersionUpdateEnd fields are used to ensure data consistency during updates. Fields ControlName Represents the name of a hardware control as a byte array. public byte[] ControlName Field Value byte[] Remarks The array is marshaled using the ByValArray attribute and has a fixed size defined by MAX_HWCONTROL_NAME_LEN. This ensures compatibility with unmanaged code. FRetVal Represents a double-precision floating-point value. public double FRetVal Field Value double Remarks This field can be used to store or retrieve a numeric value. LayoutVersion Represents the version number of the layout configuration. public int LayoutVersion Field Value int Remarks This field is used to track the version of the layout configuration. It can be useful for ensuring compatibility or identifying changes in layout structure. VersionUpdateBegin Represents the version number of the buffer at the point when an update begins. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update. It can be used to track changes or ensure consistency during buffer operations. VersionUpdateEnd Represents the version update counter that is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field can be used to track the completion of buffer write operations. Each time a buffer write is finalized, the value of this counter is incremented."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.MappedBufferVersionBlock.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.MappedBufferVersionBlock.html",
    "title": "Struct MappedBufferVersionBlock | rF2SharedMemoryNet",
    "summary": "Struct MappedBufferVersionBlock Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents a version block used to track the state of a mapped buffer during updates. public struct MappedBufferVersionBlock Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure contains two version numbers that indicate whether the buffer is being written to or is in a consistent state. If VersionUpdateBegin and VersionUpdateEnd are equal, the buffer is either not being written to or requires further verification. If the values differ, the buffer is actively being written to or may be incomplete due to an interruption (e.g., a crash or missed transition). Fields VersionUpdateBegin Represents the version number at which an update process begins. public uint VersionUpdateBegin Field Value uint VersionUpdateEnd Represents the version number at the end of an update process. public uint VersionUpdateEnd Field Value uint"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.MappedBufferVersionBlockWithSize.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.MappedBufferVersionBlockWithSize.html",
    "title": "Struct MappedBufferVersionBlockWithSize | rF2SharedMemoryNet",
    "summary": "Struct MappedBufferVersionBlockWithSize Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents a version block with size information for a mapped buffer, used to track updates to the buffer. public struct MappedBufferVersionBlockWithSize Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is typically used in scenarios where a mapped buffer requires versioning to ensure consistency during updates. The versioning mechanism involves incrementing the update counters before and after the buffer is written to, allowing consumers to detect changes. Fields BytesUpdatedHint Represents the number of bytes written to the structure during the last update. public int BytesUpdatedHint Field Value int Remarks This value provides a hint about the amount of data updated in the structure. It may be useful for tracking or debugging purposes. 0 Should be considered complete VersionUpdateBegin Represents the version number of the buffer at the point when an update begins. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update. It can be used to track changes or ensure consistency during buffer operations. VersionUpdateEnd Represents the version update counter that is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field is used to track the completion of buffer write operations. It is incremented automatically after each write operation to indicate the end of the update process."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.PhysicsOptions.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.PhysicsOptions.html",
    "title": "Struct PhysicsOptions | rF2SharedMemoryNet",
    "summary": "Struct PhysicsOptions Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the configuration options for physics and driving aids in rFactor 2. public struct PhysicsOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure contains various settings that control driving aids, mechanical behavior, and other physics-related options in the simulation. Each field represents a specific feature or adjustment, such as traction control, automatic shifting, or mechanical failure settings. Values for each field are typically represented as enumerations or ranges, as described in the field definitions. Fields AIControl Indicates whether the player vehicle is currently under AI control. public byte AIControl Field Value byte AllowPitcrewPush Gets or sets a value indicating whether pitcrew push assistance is allowed. public byte AllowPitcrewPush Field Value byte AlternateNeutral Represents whether shifting up and down simultaneously results in neutral. public byte AlternateNeutral Field Value byte AntiLockBrakes Represents the level of anti-lock braking system (ABS) functionality. public byte AntiLockBrakes Field Value byte AutoBlip Indicates whether the automatic throttle blip feature is enabled. public byte AutoBlip Field Value byte AutoClutch Indicates whether the automatic clutch feature is enabled. public byte AutoClutch Field Value byte AutoLift Indicates whether the auto-lift feature is enabled. public byte AutoLift Field Value byte AutoPit Indicates whether the automatic pit stop feature is enabled. public byte AutoPit Field Value byte AutoReverse Indicates whether the auto-reverse feature is enabled. public byte AutoReverse Field Value byte AutoShift Represents the automatic shifting mode for a vehicle. public byte AutoShift Field Value byte AutoShiftOverrideTime Specifies the duration, in seconds, before manual shifting can resume after a recent automatic shift. public float AutoShiftOverrideTime Field Value float BrakingHelp Represents the level of braking assistance provided by the system. public byte BrakingHelp Field Value byte FuelMult Represents the fuel multiplier used to adjust fuel consumption rates. public byte FuelMult Field Value byte HoldClutch Represents the state of the hold clutch for automatic shifters at the start of a race. public byte HoldClutch Field Value byte Invulnerable Indicates whether the entity is invulnerable. public byte Invulnerable Field Value byte ManualShiftOverrideTime Represents the duration, in seconds, before automatic shifting can resume after a recent manual shift. public float ManualShiftOverrideTime Field Value float MechFail Represents the mechanical failure setting. public byte MechFail Field Value byte OppositeLock Represents the state of the opposite lock feature. public byte OppositeLock Field Value byte RepeatShifts Represents the accidental repeat shift prevention value. public byte RepeatShifts Field Value byte SpeedSensitiveSteering Represents the sensitivity of steering based on speed. public float SpeedSensitiveSteering Field Value float SpinRecovery Represents the spin recovery mode for the system. public byte SpinRecovery Field Value byte StabilityControl Represents the stability control level of the system. public byte StabilityControl Field Value byte SteerRatioSpeed Represents the speed, in meters per second, below which the steering lock is expanded to its full range. public float SteerRatioSpeed Field Value float SteeringHelp Represents the level of steering assistance provided, ranging from off to high. public byte SteeringHelp Field Value byte TireMult Represents the multiplier applied to tire wear. public byte TireMult Field Value byte TractionControl Represents the level of traction control applied to the vehicle. public byte TractionControl Field Value byte Unused1 Reserved field for future use. This field is currently unused. public byte Unused1 Field Value byte Unused2 Reserved field for future use. This field is currently unused. public byte Unused2 Field Value byte"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.PitInfo.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.PitInfo.html",
    "title": "Struct PitInfo | rF2SharedMemoryNet",
    "summary": "Struct PitInfo Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents information related to pit operations in rFactor 2, including versioning and pit menu details. public struct PitInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to encapsulate data related to pit operations in rFactor 2. The version update fields are used to ensure data consistency during buffer writes. Fields PitMenu Represents the pit menu in the RF2 simulation. public PitMenu PitMenu Field Value PitMenu Remarks This field provides access to the pit menu functionality VersionUpdateBegin Represents the version number of the buffer at the point when an update begins. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update. It can be used to track changes or ensure consistency during buffer operations. VersionUpdateEnd Represents the version update counter that is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field is used to track the completion of buffer write operations. It is incremented automatically after each write operation to indicate the end of the update process."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.PitMenu.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.PitMenu.html",
    "title": "Struct PitMenu | rF2SharedMemoryNet",
    "summary": "Struct PitMenu Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the current state of the pit menu in rFactor 2, including category and choice information. public struct PitMenu Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure provides details about the currently selected category and choice in the pit menu, as well as the total number of available choices. It also includes fields for future expansion. Fields CategoryIndex Represents the index of the current category. public int CategoryIndex Field Value int CategoryName Represents the name of the current category in untranslated form. public byte[] CategoryName Field Value byte[] ChoiceIndex Represents the index of the current choice within the current category. public int ChoiceIndex Field Value int ChoiceString Represents the name of the current choice, which may include translated words. public byte[] ChoiceString Field Value byte[] Expansion Reserved for future use. public byte[] Expansion Field Value byte[] NumChoices Represents the total number of choices available. public int NumChoices Field Value int"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.PluginControl.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.PluginControl.html",
    "title": "Struct PluginControl | rF2SharedMemoryNet",
    "summary": "Struct PluginControl Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the control structure used for communication between the rFactor 2 plugin and the simulation. public struct PluginControl Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is primarily used to manage versioning and control requests for various simulation inputs. It is designed to be updated sequentially, with the VersionUpdateBegin and VersionUpdateEnd fields ensuring consistency during buffer writes. Fields LayoutVersion Represents the version number of the layout configuration. public int LayoutVersion Field Value int RequestEnableBuffersMask Represents a bitmask used to enable specific request buffers. public int RequestEnableBuffersMask Field Value int RequestHWControlInput Represents the hardware control input request as a byte value. public byte RequestHWControlInput Field Value byte Remarks This field is used to store a hardware control input request in byte format. The specific meaning of the value depends on the context in which it is used. RequestRulesControlInput Represents the control input for request rules. public byte RequestRulesControlInput Field Value byte Remarks This field is intended to store a byte value that influences the behavior of request rules. Ensure the value is within the expected range for the specific rules being applied. RequestWeatherControlInput Represents the input value for requesting weather control. public byte RequestWeatherControlInput Field Value byte Remarks This field is used to specify the desired weather control input in a weather control system. The exact meaning of the value depends on the implementation of the system. VersionUpdateBegin Represents the version number of the buffer at the point when an update begins. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update. It can be used to track changes or ensure consistency during buffer operations. VersionUpdateEnd Represents the version update counter, which is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field is used to track the completion of buffer write operations. It is incremented automatically after each write to indicate the end of the update process."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.Rules.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.Rules.html",
    "title": "Struct Rules | rF2SharedMemoryNet",
    "summary": "Struct Rules Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the rules and state information for the rFactor 2 simulation, including track rules, actions, and participants. public struct Rules Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to manage and synchronize simulation data related to track rules, vehicle actions, and participants. It includes versioning fields to track updates and hints about the number of bytes updated during the last synchronization. Fields Actions Represents an array of track rule actions mapped to vehicles. public TrackRulesAction[] Actions Field Value TrackRulesAction[] Remarks The array is fixed in size, with a maximum length defined by MAX_MAPPED_VEHICLES. Each element corresponds to a specific track rule action for a mapped vehicle. BytesUpdatedHint Represents the number of bytes written to the structure during the last update. public int BytesUpdatedHint Field Value int Remarks This value serves as a hint for the number of bytes updated in the structure. It may be useful for tracking or debugging purposes. Participants Represents an array of participants in the track rules system. public TrackRulesParticipant[] Participants Field Value TrackRulesParticipant[] Remarks The array is marshaled using the ByValArray attribute, ensuring compatibility with unmanaged code. The size of the array is determined by the constant MAX_MAPPED_VEHICLES. TrackRules Represents the track rules for an RF2 simulation. public TrackRules TrackRules Field Value TrackRules VersionUpdateBegin Represents the version number of the buffer at the point when an update begins. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update process. It can be used to track changes or ensure consistency during buffer operations. VersionUpdateEnd Represents the version update counter, which is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field is used to track the completion of buffer write operations. It is incremented automatically after each write to indicate the end of the update process."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.RulesControl.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.RulesControl.html",
    "title": "Struct RulesControl | rF2SharedMemoryNet",
    "summary": "Struct RulesControl Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the control structure for managing track rules and participants in rFactor2. public struct RulesControl Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to manage the state and actions related to track rules in rFactor2. It includes versioning information for updates, layout versioning, track rules, and arrays of actions and participants. The version update fields are incremented before and after buffer writes to ensure consistency during updates. Fields Actions Represents an array of track rule actions for mapped vehicles in rFactor2. public TrackRulesAction[] Actions Field Value TrackRulesAction[] Remarks The array is marshaled using the ByValArray attribute, with a fixed size specified by MAX_MAPPED_VEHICLES. This ensures compatibility with unmanaged code. LayoutVersion Represents the version number of the layout. public int LayoutVersion Field Value int Remarks This field indicates the current version of the layout configuration. It can be used to track changes or updates to the layout structure. Participants Represents an array of participants in the track rules system. public TrackRulesParticipant[] Participants Field Value TrackRulesParticipant[] Remarks The array is marshaled using the ByValArray attribute, with a fixed size specified by MAX_MAPPED_VEHICLES. This ensures compatibility with unmanaged code. TrackRules Represents the track rules for an RF2 simulation. public TrackRules TrackRules Field Value TrackRules VersionUpdateBegin Represents the version number of the buffer at the point when an update begins. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update. It can be used to track changes or ensure consistency during buffer operations. VersionUpdateEnd Represents the version update counter that is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field is used to track the completion of buffer write operations. It is incremented automatically after each write operation to indicate the end of the update process."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.Scoring.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.Scoring.html",
    "title": "Struct Scoring | rF2SharedMemoryNet",
    "summary": "Struct Scoring Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the scoring data structure used in rFactor 2 to provide information about the current race session, including scoring details and vehicle-specific scoring data. public struct Scoring Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is designed for interop scenarios and is used to exchange scoring information between rFactor 2 and external applications. It contains session-wide scoring details, as well as an array of vehicle-specific scoring data. The structure is updated periodically, with the VersionUpdateBegin and VersionUpdateEnd fields indicating the start and end of an update cycle. The BytesUpdatedHint field provides a hint about the number of bytes updated during the last cycle. Fields BytesUpdatedHint Represents the number of bytes written to the structure during the last update. public int BytesUpdatedHint Field Value int Remarks This value provides a hint about the amount of data updated in the structure. It may be useful for tracking or debugging purposes. ScoringInfo Represents the scoring information for the RF2 system. public ScoringInfo ScoringInfo Field Value ScoringInfo Remarks This field contains detailed scoring data related to the RF2 system. It is intended to be used for accessing or manipulating scoring-related information. Vehicles Represents an array of vehicle scoring data for mapped vehicles. public VehicleScoring[] Vehicles Field Value VehicleScoring[] Remarks The array contains scoring information for up to MAX_MAPPED_VEHICLES vehicles. Each element corresponds to a specific vehicle's scoring data. VersionUpdateBegin Represents the version number of the buffer update process. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update. It can be used to track or verify the state of the buffer during write operations. VersionUpdateEnd Represents the version update counter, which is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field is used to track the completion of buffer write operations. It is incremented automatically after each write to indicate the end of the update process."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.ScoringInfo.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.ScoringInfo.html",
    "title": "Struct ScoringInfo | rF2SharedMemoryNet",
    "summary": "Struct ScoringInfo Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents scoring information for a session in rFactor 2, including track details, session timing, weather conditions, and multiplayer settings. public struct ScoringInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure provides detailed information about the current state of a session in rFactor 2, including track name, session type, timing data, weather conditions, and multiplayer server details. It is primarily used for telemetry and plugin development to monitor and interact with the game state. Fields AmbientTemp Represents the ambient temperature in degrees Celsius. public double AmbientTemp Field Value double AvgPathWetness Represents the average wetness on the main path, expressed as a value between 0.0 and 1.0. public double AvgPathWetness Field Value double CurrentET Represents the current session time. public double CurrentET Field Value double DarkCloud Represents the darkness level of clouds in the weather system. public double DarkCloud Field Value double EndET Ending time of the session. public double EndET Field Value double Expansion For future expansion. public byte[] Expansion Field Value byte[] GameMode Represents the game mode for multiplayer functionality. public byte GameMode Field Value byte Remarks See GameMode for more details on the possible values. GamePhase Represents the current phase of the game session. public byte GamePhase Field Value byte Remarks See GamePhase for more details on the possible values.\"/> InRealtime Indicates whether the operation is performed in real-time as opposed to being monitored. public byte InRealtime Field Value byte IsPasswordProtected Indicates whether the server is password protected. public byte IsPasswordProtected Field Value byte LapDist Represents the distance traveled around the track in meters. public double LapDist Field Value double Remarks This field stores the current lap distance for a vehicle or entity on the track. The value is typically updated as the entity progresses along the track. MaxLaps Max laps for the session. public int MaxLaps Field Value int MaxPathWetness Represents the maximum wetness level on the main path, ranging from 0.0 to 1.0. public double MaxPathWetness Field Value double MaxPlayers Represents the maximum number of vehicles that can be in the session. public int MaxPlayers Field Value int MinPathWetness Represents the minimum wetness level on the main path. public double MinPathWetness Field Value double NumRedLights Represents the number of red lights in the start sequence. public byte NumRedLights Field Value byte Remarks This value indicates the total count of red lights displayed during the start sequence. It can be used to determine the duration or configuration of the sequence. NumVehicles Represents the current number of vehicles. public int NumVehicles Field Value int PlayerName Represents the name of the player, including any possible multiplayer override. public byte[] PlayerName Field Value byte[] Remarks Array of bytes with a fixed size of 32 bytes. PlrFileName Represents a byte array that may be encoded to form a legal filename. public byte[] PlrFileName Field Value byte[] Remarks The array is fixed in size to 64 bytes and may contain encoded data to ensure compatibility with file naming conventions. Pointer1 Not used public byte[] Pointer1 Field Value byte[] Pointer2 Not used public byte[] Pointer2 Field Value byte[] Raining Represents the severity of rainfall on a scale from 0.0 to 1.0. public double Raining Field Value double SectorFlag Represents the flags indicating the presence of local yellow warnings in each sector. public sbyte[] SectorFlag Field Value sbyte[] Remarks The array contains three elements, each representing a sector. The mapping of sectors to array indices (whether sector 0 corresponds to the first or last index) is not explicitly defined and should be verified. ServerName Represents the name of the server as a fixed-size byte array. public byte[] ServerName Field Value byte[] Remarks The array is marshaled as a fixed-size unmanaged array with a maximum size of 32 bytes. ServerPort Represents the port number of the server. public ushort ServerPort Field Value ushort ServerPublicIP Represents the public IP address of the server. public uint ServerPublicIP Field Value uint Session Represents the current session of the event. public int Session Field Value int Remarks 0 Test day session. 1-4 Practice sessions, numbered 1 to 4. 5-8 Qualifying sessions, numbered 5 to 8. 9 Warmup session. 10-13 Race session StartET Represents the start time of the event, measured in seconds since midnight. public float StartET Field Value float StartLight Represents the starting light frame number for a track. public byte StartLight Field Value byte Remarks The value of this field depends on the specific track configuration. TrackName Represents the name of the current track. public byte[] TrackName Field Value byte[] Remarks The track name is stored as a fixed-size array of 64 bytes. TrackTemp Represents the temperature of the track in degrees Celsius. public double TrackTemp Field Value double Wind Represents the wind speed as a three-dimensional vector. public Vec3 Wind Field Value Vec3 YellowFlagState Represents the current state of the yellow flag during a full-course caution. public sbyte YellowFlagState Field Value sbyte Remarks See YellowFlagState for more details on the possible values."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.SessionTransitionCapture.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.SessionTransitionCapture.html",
    "title": "Struct SessionTransitionCapture | rF2SharedMemoryNet",
    "summary": "Struct SessionTransitionCapture Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents a snapshot of session transition data in rFactor 2, including game phase, session information, and scoring details for vehicles. public struct SessionTransitionCapture Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to capture and transfer information about the current state of a session in rFactor 2. It includes details about the game phase, session identifier, and scoring data for vehicles participating in the session. Fields GamePhase Represents the current phase of the game. public byte GamePhase Field Value byte NumScoringVehicles Represents the number of scoring vehicles in the current context. public int NumScoringVehicles Field Value int ScoringVehicles Represents an array of vehicle scoring data for mapped vehicles. public VehicleScoringCapture[] ScoringVehicles Field Value VehicleScoringCapture[] Remarks The array contains scoring information for up to MAX_MAPPED_VEHICLES vehicles. Each element in the array corresponds to a specific vehicle's scoring data. Session Represents the current session identifier. public int Session Field Value int"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.Telemetry.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.Telemetry.html",
    "title": "Struct Telemetry | rF2SharedMemoryNet",
    "summary": "Struct Telemetry Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents telemetry data for rFactor 2, including information about vehicles and update status. public struct Telemetry Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to store telemetry data for rFactor 2, including details about the current number of vehicles and their telemetry information. It also provides versioning and update hints to help consumers determine the state of the data buffer. Fields BytesUpdatedHint Represents the number of bytes written to the structure during the last update. public int BytesUpdatedHint Field Value int Remarks This value provides a hint about the amount of data updated in the structure. It may be useful for tracking or debugging purposes. NumVehicles Represents the current number of vehicles. public int NumVehicles Field Value int Remarks This field holds the count of vehicles currently tracked or managed. Vehicles Represents an array of telemetry data for vehicles mapped in the simulation. public VehicleTelemetry[] Vehicles Field Value VehicleTelemetry[] Remarks The array contains telemetry information for up to MAX_MAPPED_VEHICLES vehicles. Each element corresponds to a specific vehicle's telemetry data. VersionUpdateBegin Represents the version number of the buffer update process. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update. It can be used to track or verify the state of the buffer during write operations. VersionUpdateEnd Represents the version update counter, which is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field is used to track the completion of buffer write operations. It is incremented automatically after each write to indicate the end of the update process."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.TrackRules.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.TrackRules.html",
    "title": "Struct TrackRules | rF2SharedMemoryNet",
    "summary": "Struct TrackRules Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the rules and state information for a racing track in rFactor 2. public struct TrackRules Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure encapsulates various parameters and states related to track rules, safety car behavior, yellow flag conditions, participant information, and other race-related data. It is primarily used to manage and communicate the current state of the track and race conditions during a session. Fields CurrentET Represents the current elapsed time in seconds. public double CurrentET Field Value double InputExpansion For future expansion. public byte[] InputExpansion Field Value byte[] InputOutputExpansion For future expansion. public byte[] InputOutputExpansion Field Value byte[] MaximumColumnSpacing Represents the maximum desired spacing between vehicles in a column. public float MaximumColumnSpacing Field Value float Remarks A value of -1 indicates that the spacing is indeterminate or unenforced. MaximumSpeed Represents the maximum speed limit for driving. public float MaximumSpeed Field Value float Remarks A value of -1 indicates that there is no speed limit. Message Represents a message intended for all users, providing context or information about the current state. public byte[] Message Field Value byte[] MinimumColumnSpacing Represents the minimum desired spacing between vehicles in a column. public float MinimumColumnSpacing Field Value float Remarks A value of -1 indicates that the spacing is indeterminate or unenforced. MinimumSpeed Represents the minimum speed that a vehicle should be driving. public float MinimumSpeed Field Value float Remarks A value of -1 indicates that there is no minimum speed limit. NumActions Represents the number of recent actions performed. public int NumActions Field Value int NumParticipants Number of participants public int NumParticipants Field Value int PitLaneStartDist Represents the distance along the track where the waypoint branch to the pit lane begins. public float PitLaneStartDist Field Value float Pointer1 Not used public byte[] Pointer1 Field Value byte[] Pointer2 Not used public byte[] Pointer2 Field Value byte[] PoleColumn Represents the column assignment where the pole position data is located. public TrackRulesColumn PoleColumn Field Value TrackRulesColumn SafetyCarActive Indicates whether the safety car is active. public byte SafetyCarActive Field Value byte SafetyCarExists Indicates whether a safety car exists in the current context. public byte SafetyCarExists Field Value byte SafetyCarInstruction Represents the instruction for the safety car's behavior during a race. public int SafetyCarInstruction Field Value int Remarks See SafetyCarInstruction for more details on the possible values. SafetyCarLapDist Safety car lap distance public double SafetyCarLapDist Field Value double SafetyCarLapDistAtStart Where the safety car starts from public float SafetyCarLapDistAtStart Field Value float SafetyCarLaps Gets or sets the number of laps completed by the safety car. public int SafetyCarLaps Field Value int SafetyCarMaximumSpacing Represents the maximum allowable spacing behind the safety car. public float SafetyCarMaximumSpacing Field Value float Remarks -1 indicates no limit. SafetyCarMinimumSpacing Represents the minimum spacing behind the safety car. public float SafetyCarMinimumSpacing Field Value float Remarks -1 indicates no limit. SafetyCarSpeed Represents the maximum speed, at which the safety car can drive. public float SafetyCarSpeed Field Value float SafetyCarThreshold Represents the threshold value at which a safety car is deployed. public float SafetyCarThreshold Field Value float Stage Represents the current stage of the RF2 track rules. public TrackRulesStage Stage Field Value TrackRulesStage TeleportLapDist Represents the distance to the front of the teleport locations, which serves as an initial estimate for determining where to signal the start of an event. public float TeleportLapDist Field Value float YellowFlagDetected Indicates whether a yellow flag has been requested or the sum of participant yellow severity values exceeds the safety car threshold. public byte YellowFlagDetected Field Value byte YellowFlagLaps Represents the suggested number of laps to run under a yellow flag condition. public short YellowFlagLaps Field Value short YellowFlagLapsWasOverridden Indicates whether the yellow flag laps were overridden by an admin request. public byte YellowFlagLapsWasOverridden Field Value byte Remarks See YellowFlagOveride for more details. YellowFlagState Represents the state of the yellow flag in a racing event. public sbyte YellowFlagState Field Value sbyte Remarks See YellowFlagState for more details on the possible values."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.TrackRulesAction.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.TrackRulesAction.html",
    "title": "Struct TrackRulesAction | rF2SharedMemoryNet",
    "summary": "Struct TrackRulesAction Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents an action related to track rules in rFactor 2, including a recommended command, slot ID, and elapsed time of the event. public struct TrackRulesAction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is typically used to communicate track rule actions within the simulation. The values are intended for input purposes only and provide details about the recommended action, the associated slot ID (if applicable), and the elapsed time of the event. Fields Command Represents the recommended action for RF2 track rules. public TrackRulesCommand Command Field Value TrackRulesCommand ElapsedTime Represents the elapsed time at which an event occurred, if applicable. public double ElapsedTime Field Value double Id Represents the slot ID, if applicable. public int Id Field Value int"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.TrackRulesParticipant.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.TrackRulesParticipant.html",
    "title": "Struct TrackRulesParticipant | rF2SharedMemoryNet",
    "summary": "Struct TrackRulesParticipant Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents a participant in track rules management for a racing simulation, including information about position, status, and rules compliance. public struct TrackRulesParticipant Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to manage and track the state of individual participants during formation laps, caution periods, and other race scenarios. It includes input-only fields for participant identification and status, input/output fields for rules compliance and position assignments, and additional fields for messaging and future expansion. Fields ColumnAssignment Represents the column assignment for a participant, indicating the specific line or lane they are supposed to be in. public TrackRulesColumn ColumnAssignment Field Value TrackRulesColumn Remarks This field specifies the track rules column for a participant, which determines their designated position on the track. CurrentRelativeDistance Represents the current relative distance of the vehicle in the race. public double CurrentRelativeDistance Field Value double Remarks The value is calculated as the sum of the lap distance multiplied by the relative laps and the lap distance of the vehicle. This property is useful for determining the vehicle's position relative to other competitors. Expansion For future expansion. public byte[] Expansion Field Value byte[] FrozenOrder Represents the 0-based position of the frozen order when a caution flag is issued. public short FrozenOrder Field Value short Remarks This value is not valid during formation laps. GoalRelativeDistance Represents the relative distance to the goal, calculated based on the leader's position and adjusted by the desired column spacing and position assignments. public double GoalRelativeDistance Field Value double ID Represents the unique identifier for a slot. public int ID Field Value int Message Represents a message intended for a participant, providing context or explanation about the current situation. public byte[] Message Field Value byte[] Remarks The message is stored as an array of 96 bytes and is untranslated. It is expected to be processed by client machines for translation. PitsOpen Indicates whether the rules allow this particular vehicle to enter the pits at the current time. public byte PitsOpen Field Value byte Remarks 2 for false or 3 for true; if you want to edit it, set to 0 for false or 1 for true. To simplify use PitsOpen Place Represents the 1-based position of an entity. public short Place Field Value short Remarks Typically used for initializing the track order during a formation lap. PositionAssignment Represents the 0-based position within a column (line or lane) where the participant is assigned. public int PositionAssignment Field Value int RelativeLaps Represents the current number of formation or caution laps relative to the safety car. public int RelativeLaps Field Value int Remarks This value is typically zero, except when the safety car crosses the start/finish line. It can be decremented to implement rules such as the 'wave around' or 'beneficiary rule' (commonly referred to as 'lucky dog' or 'free pass'). Unused Unused public byte[] Unused Field Value byte[] UpToSpeed Indicates whether the vehicle is up to speed and can be followed while in the frozen order. public byte UpToSpeed Field Value byte Remarks This flag should be set to false for vehicles that have temporarily spun out and have not yet returned to normal speed. YellowSeverity Represents the severity rating of how much this vehicle is contributing to a yellow flag. public float YellowSeverity Field Value float"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.TrackedDamage.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.TrackedDamage.html",
    "title": "Struct TrackedDamage | rF2SharedMemoryNet",
    "summary": "Struct TrackedDamage Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents damage tracking data for a racing session, including maximum and accumulated impact magnitudes. public struct TrackedDamage Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to track the magnitude of impacts during a racing session. The values are updated on every telemetry update and reset when the vehicle visits the pits or the session is restarted. Fields AccumulatedImpactMagnitude Represents the accumulated impact magnitude tracked during telemetry updates. public double AccumulatedImpactMagnitude Field Value double Remarks The value is updated continuously during telemetry updates and reset when visiting the pits or restarting the session. MaxImpactMagnitude Represents the maximum impact magnitude recorded during telemetry updates. public double MaxImpactMagnitude Field Value double Remarks The value is updated on every telemetry update and reset when visiting the pits or restarting the session."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.Vec3.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.Vec3.html",
    "title": "Struct Vec3 | rF2SharedMemoryNet",
    "summary": "Struct Vec3 Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents a three-dimensional vector with double-precision floating-point components. public struct Vec3 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is commonly used to represent points or directions in 3D space. The components X, Y, and Z can be accessed directly. Fields X Represents a coordinate of a point in 3D space. public double X Field Value double Remarks These fields can be used to store or manipulate the position of a point in a three-dimensional coordinate system. Y Represents a coordinate of a point in 3D space. public double Y Field Value double Remarks These fields can be used to store or manipulate the position of a point in a three-dimensional coordinate system. Z Represents a coordinate of a point in 3D space. public double Z Field Value double Remarks These fields can be used to store or manipulate the position of a point in a three-dimensional coordinate system."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.VehicleScoring.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.VehicleScoring.html",
    "title": "Struct VehicleScoring | rF2SharedMemoryNet",
    "summary": "Struct VehicleScoring Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents detailed scoring and telemetry data for a vehicle in rFactor 2. public struct VehicleScoring Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure provides comprehensive information about a vehicle's state, performance, and position during a race or session. It includes data such as lap times, sector times, position, control status, and telemetry details. Many fields are specific to rFactor 2's internal scoring and telemetry system. Fields BestLapSector1 Sector 1 time from best lap (not necessarily the best sector 1 time) public float BestLapSector1 Field Value float BestLapSector2 Sector 2 time from best lap (not necessarily the best sector 2 time) public float BestLapSector2 Field Value float BestLapTime Represents the best lap time achieved during a race. public double BestLapTime Field Value double BestSector1 Represents the best recorded time for sector 1. public double BestSector1 Field Value double BestSector2 Represents the best time recorded for sector 2, including the time from sector 1. public double BestSector2 Field Value double Control Who is in control of the vehicle. public sbyte Control Field Value sbyte Remarks See ControlEntity for possible values: CountLapFlag Represents the flag indicating how laps and time are counted during an operation. public byte CountLapFlag Field Value byte Remarks See CountLapFlag for possible values: CurSector1 Time of current sector 1 if valid. public double CurSector1 Field Value double CurSector2 Time of current sector 2 plus sector 1 if valid. public double CurSector2 Field Value double DriverName Represents the name of the driver as a byte array. public byte[] DriverName Field Value byte[] Remarks The driver name is stored as a 32 byte array. EstimatedLapTime Estimated laptime. public double EstimatedLapTime Field Value double Expansion For future use. public byte[] Expansion Field Value byte[] FinishStatus Represents the status of the vehicle's finish. public sbyte FinishStatus Field Value sbyte Remarks See FinishStatus for possible values: Flag Represents the current flag being shown to the vehicle. public byte Flag Field Value byte Remarks See PrimaryFlags for possible values. Headlights Headlights status. public byte Headlights Field Value byte ID Represents the slot ID for a player in a multiplayer session. public int ID Field Value int InGarageStall Is in correct garage stall. public byte InGarageStall Field Value byte InPits Is in the pits. public byte InPits Field Value byte IndividualPhase Game phases public byte IndividualPhase Field Value byte Remarks See GamePhase for possible values. IsPlayer Is this the player's vehicle. public byte IsPlayer Field Value byte LapDist Current distance around the track public double LapDist Field Value double LapStartTime Time this lap was started. public double LapStartTime Field Value double LapsBehindLeader laps behind leader vehicle. public int LapsBehindLeader Field Value int LapsBehindNext Laps behind the vehicle in the next higher place. public int LapsBehindNext Field Value int LastLapTime Represents the time of the last lap public double LastLapTime Field Value double LastSector1 Represents the recorded time for the last Sector 1. public double LastSector1 Field Value double LastSector2 Represents the time of the last sector 2 plus sector 1. public double LastSector2 Field Value double LocalAcceleration Acceleration (meters/sec^2) in local vehicle coordinates public Vec3 LocalAcceleration Field Value Vec3 LocalRotation Represents the rotational velocity of the vehicle in local coordinates. public Vec3 LocalRotation Field Value Vec3 LocalRotationalAcceleration Represents the rotational acceleration in local vehicle coordinates. public Vec3 LocalRotationalAcceleration Field Value Vec3 LocalVelocity Velocity (meters/sec) in local vehicle coordinates. public Vec3 LocalVelocity Field Value Vec3 NumPenalties Number of penalties currently outstanding for the vehicle. public short NumPenalties Field Value short NumPitstops Number of pitstops made by the vehicle. public short NumPitstops Field Value short Orientation Represents the rows of an orientation matrix. public Vec3[] Orientation Field Value Vec3[] PathLateral Lateral position with respect to the approximate \"center\" path. public double PathLateral Field Value double PitGroup Pit group name. public byte[] PitGroup Field Value byte[] Remarks Stored a fixed-size byte array of 24 bytes. PitLapDist Represents the location of the pit in terms of lap distance. public float PitLapDist Field Value float PitState Pit state of the vehicle. public byte PitState Field Value byte Remarks See PitState for possible values: Place 1-based position of the vehicle. public byte Place Field Value byte Position World position in meters. public Vec3 Position Field Value Vec3 Qualification Qualification status 1-based. public int Qualification Field Value int Remarks -1 indicates an invalid qualification status. Sector Represents the sector identifier in a specific sequence. public sbyte Sector Field Value sbyte Remarks See Sector for possible values: ServerScored whether this vehicle is being scored by server. public byte ServerScored Field Value byte Remarks Could be off in qualifying or racing heats. TimeBehindLeader Time behind leader vehicle. public double TimeBehindLeader Field Value double TimeBehindNext Time behind the vehicle in the next higher place. public double TimeBehindNext Field Value double TimeIntoLap Estimated time into lap. public double TimeIntoLap Field Value double TotalLaps Represents the total number of laps completed. public short TotalLaps Field Value short TrackEdge Represents the track edge position relative to the center path on the same side of the track as the vehicle. public double TrackEdge Field Value double UnderYellow Indicates whether the car has taken a full-course caution flag at the start/finish line. public byte UnderYellow Field Value byte UpgradePack Coded upgrades public byte[] UpgradePack Field Value byte[] Remarks Stored as a fixed-size byte array of 16 bytes. VehicleClass Name of vehicle class. public byte[] VehicleClass Field Value byte[] Remarks The array is marshaled as a fixed-size unmanaged array with a size of 32 bytes. VehicleName Represents the name of the vehicle as a byte array. public byte[] VehicleName Field Value byte[] Remarks The array is fixed in size to 64 bytes."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.VehicleScoringCapture.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.VehicleScoringCapture.html",
    "title": "Struct VehicleScoringCapture | rF2SharedMemoryNet",
    "summary": "Struct VehicleScoringCapture Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the scoring information for a vehicle in rFactor 2, including its position, player status, and finish status. public struct VehicleScoringCapture Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to capture scoring data for vehicles during gameplay in rFactor 2. The mID field represents the slot ID, which may be reused in multiplayer sessions after a player leaves. Fields mFinishStatus Finish status of the vehicle. public sbyte mFinishStatus Field Value sbyte Remarks See FinishStatus for possible values. mID ID of the vehicle in the scoring capture. public int mID Field Value int Remarks May be reused in multiplayer sessions after a player leaves. mIsPlayer Is the vehicle a player. public byte mIsPlayer Field Value byte mPlace Place of the vehicle. public byte mPlace Field Value byte"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.VehicleTelemetry.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.VehicleTelemetry.html",
    "title": "Struct VehicleTelemetry | rF2SharedMemoryNet",
    "summary": "Struct VehicleTelemetry Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents telemetry data for a vehicle in rFactor 2, including positional, orientation, vehicle status, driver input, aerodynamics, and other detailed metrics. public struct VehicleTelemetry Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure provides comprehensive telemetry information for a vehicle in rFactor 2, including real-time data such as position, velocity, acceleration, engine status, driver inputs, and aerodynamic properties. It is designed for use in applications that require detailed simulation data, such as telemetry analysis tools or custom plugins. Many fields in this structure represent instantaneous values, such as engine RPM, throttle input, and aerodynamic forces. Some fields, such as lap time and impact data, provide historical context for the current state of the vehicle. Note that certain fields, such as arrays for vehicle and track names, are encoded as byte arrays and may require conversion to strings for human-readable use. Additionally, some fields, such as orientation matrices, require specialized handling for interpretation. Fields AntiStallActivated Anti-stall activated status. public byte AntiStallActivated Field Value byte BatteryChargeFraction Battery charge fraction. public double BatteryChargeFraction Field Value double ClutchRPM Clutch RPM public double ClutchRPM Field Value double CurrentSector Represents the current sector of the track, with the pitlane status stored in the sign bit. public int CurrentSector Field Value int Remarks The value is zero-based, where the least significant bits indicate the sector number. If the sign bit is set, the value represents the pitlane status. For example, entering the pitlane from the third sector would result in a value of 0x80000002. DeltaTime Time since the last update in seconds. public double DeltaTime Field Value double DentSeverity Represents the severity of dents at eight locations around the car. public byte[] DentSeverity Field Value byte[] Remarks See DentSeverity for the possible values. Detached Any parts besides wheels have been detached. public byte Detached Field Value byte Drag Drag coefficient. public double Drag Field Value double ElapsedTime Game session time in seconds. public double ElapsedTime Field Value double ElectricBoostMotorRPM RPM of the electric boost motor. public double ElectricBoostMotorRPM Field Value double ElectricBoostMotorState Electric boost motor state. public byte ElectricBoostMotorState Field Value byte Remarks See BoostMotorState for the possible values. ElectricBoostMotorTemperature Temperature of the electric boost motor. public double ElectricBoostMotorTemperature Field Value double ElectricBoostMotorTorque Torque of the boost motor. public double ElectricBoostMotorTorque Field Value double Remarks Negative values indicate regenerative braking. ElectricBoostWaterTemperature Current water temperature of the electric boost motor cooler if present. public double ElectricBoostWaterTemperature Field Value double EngineMaxRPM Max engine RPM. public double EngineMaxRPM Field Value double EngineOilTemp Engine oil temperature in celsius. public double EngineOilTemp Field Value double EngineRPM Represents the current revolutions per minute (RPM) of the engine. public double EngineRPM Field Value double EngineTorque Current engine torque, including any additive torque. public double EngineTorque Field Value double EngineWaterTemp Engine water temp in celsius. public double EngineWaterTemp Field Value double Expansion For future use. public byte[] Expansion Field Value byte[] FilteredBrake ABS filtered brake public double FilteredBrake Field Value double FilteredClutch Filtered clutch public double FilteredClutch Field Value double FilteredSteering Filtered steering public double FilteredSteering Field Value double FilteredThrottle TC filtered throttle public double FilteredThrottle Field Value double Front3rdDeflection Represents the deflection at the front third spring. public double Front3rdDeflection Field Value double FrontDownforce Front downforce public double FrontDownforce Field Value double FrontFlapActivated Indicates whether the front flap is activated. public byte FrontFlapActivated Field Value byte FrontRideHeight Front ride height public double FrontRideHeight Field Value double FrontTyreCompoundIndex Front tyre compound index public byte FrontTyreCompoundIndex Field Value byte FrontTyreCompoundName Front tyre compound name. public byte[] FrontTyreCompoundName Field Value byte[] Remarks Stored as a byte array of size 18. FrontWingHeight Front wing height public double FrontWingHeight Field Value double Fuel Fuel level in liters. public double Fuel Field Value double FuelCapacity Fuel capacity in liters. public double FuelCapacity Field Value double Gear Gear information public int Gear Field Value int Remarks -1 indicates reverse gear, 0 indicates neutral, and positive values indicate forward gears. Headlights Headlights are on. public byte Headlights Field Value byte ID Identifier for the telemetry slot. public int ID Field Value int IgnitionStarter Igninition and starter status. public byte IgnitionStarter Field Value byte Remarks See IgnitionStarterStatus for the possible values. LapNumber Current lap number. public int LapNumber Field Value int LapStartTime Time this las was started public double LapStartTime Field Value double LastImpactMagnitude Magnitude of the last impact. public double LastImpactMagnitude Field Value double LastImpactPosition Location of last impact public Vec3 LastImpactPosition Field Value Vec3 LastImpactTime Time of last impact. public double LastImpactTime Field Value double LocalAcceleration Acceleration (meters/sec^2) in local vehicle coordinates public Vec3 LocalAcceleration Field Value Vec3 LocalRotationalAcceleration Rotational acceleration (radians/sec^2) in local vehicle coordinates public Vec3 LocalRotationalAcceleration Field Value Vec3 LocalRotationalSpeed Rotation (radians/sec) in local vehicle coordinates public Vec3 LocalRotationalSpeed Field Value Vec3 LocalVelocity Velocity in world coordinates (meters/sec) public Vec3 LocalVelocity Field Value Vec3 MaxGears Represents the maximum number of forward gears available. public byte MaxGears Field Value byte Orientation rows of orientation matrix public Vec3[] Orientation Field Value Vec3[] Overheating Overheating icon is shown. public byte Overheating Field Value byte PhysicalSteeringWheelRange Represents the physical range of the steering wheel in degrees. public float PhysicalSteeringWheelRange Field Value float PhysicsToGraphicsOffset Represents the offset from the static center of gravity (CG) to the graphical center. public float[] PhysicsToGraphicsOffset Field Value float[] Position World position in meters public Vec3 Position Field Value Vec3 Rear3rdDeflection Represents the deflection at the rear third spring. public double Rear3rdDeflection Field Value double RearBrakeBias Rear brake bias fraction. public double RearBrakeBias Field Value double RearDownforce Rear downforce public double RearDownforce Field Value double RearFlapActivated Indicates whether the rear flap is activated. public byte RearFlapActivated Field Value byte RearFlapLegalStatus Rear flap legal status. public byte RearFlapLegalStatus Field Value byte Remarks See RearFlapLegalStatus for the possible values. RearRideHeight Rear ride height public double RearRideHeight Field Value double RearTyreCompoundIndex Rear tyre compound inde public byte RearTyreCompoundIndex Field Value byte RearTyreCompoundName Rear tyre compound name. public byte[] RearTyreCompoundName Field Value byte[] Remarks Stored as a byte array of size 18. ScheduledStops Number of scheduled pit stops. public byte ScheduledStops Field Value byte SpeedLimiter Indicates whether the speed limiter is enabled. public byte SpeedLimiter Field Value byte SpeedLimiterAvailable Is speed limiter available. public byte SpeedLimiterAvailable Field Value byte SteeringShaftTorque Torque around the steering shaft. public double SteeringShaftTorque Field Value double TrackName Name of track public byte[] TrackName Field Value byte[] Remarks Stored as a byte array of size 64. TurboBoostPressure Curren turbo boost pressure if available. public double TurboBoostPressure Field Value double UnfilteredBrake Unfiltered brake public double UnfilteredBrake Field Value double UnfilteredClutch Unfiltered clutch public double UnfilteredClutch Field Value double UnfilteredSteering Unfiltered steering public double UnfilteredSteering Field Value double UnfilteredThrottle Unfiltered throttle public double UnfilteredThrottle Field Value double Unused Unused public byte[] Unused Field Value byte[] VehicleName Vehicle name public byte[] VehicleName Field Value byte[] Remarks Stored as a byte array of size 64. VisualSteeringWheelRange Visual steering wheel range. public float VisualSteeringWheelRange Field Value float Wheels Wheel information. public Wheel[] Wheels Field Value Wheel[] Remarks Layout is as follows: front left, front right, rear left, rear right."
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.Weather.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.Weather.html",
    "title": "Struct Weather | rF2SharedMemoryNet",
    "summary": "Struct Weather Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents weather-related data and control information for the RF2 simulation. public struct Weather Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure contains weather control information and metadata related to the simulation's weather system. The VersionUpdateBegin and VersionUpdateEnd fields are used to track updates to the buffer. Fields TrackNodeSize Represents the size of a track node. public double TrackNodeSize Field Value double VersionUpdateBegin Represents the version number of the buffer at the point when an update begins. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update. It can be used to track changes or ensure consistency during buffer operations. VersionUpdateEnd Represents the version update counter, which is incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field can be used to track the completion of buffer write operations. Each successful write increments the value. WeatherInfo Represents weather control information. public WeatherControlInfo WeatherInfo Field Value WeatherControlInfo"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.WeatherControl.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.WeatherControl.html",
    "title": "Struct WeatherControl | rF2SharedMemoryNet",
    "summary": "Struct WeatherControl Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents the weather control data structure used in RF2 simulations. public struct WeatherControl Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure contains information about the weather control system, including versioning details and weather-specific data. Fields LayoutVersion Layout version of the weather control structure. public int LayoutVersion Field Value int VersionUpdateBegin Represents the version number of the buffer at the point when an update begins. public uint VersionUpdateBegin Field Value uint Remarks This value is incremented immediately before the buffer is written to, indicating the start of an update process. It can be used to track changes or ensure consistency during buffer operations. VersionUpdateEnd Represents the version update counter, incremented after a buffer write operation is completed. public uint VersionUpdateEnd Field Value uint Remarks This field is intended to track the completion of buffer write operations. It is incremented automatically after each write to indicate the end of an update cycle. WeatherInfo Represents weather control information for RF2 simulations. public WeatherControlInfo WeatherInfo Field Value WeatherControlInfo"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.WeatherControlInfo.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.WeatherControlInfo.html",
    "title": "Struct WeatherControlInfo | rF2SharedMemoryNet",
    "summary": "Struct WeatherControlInfo Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents weather control information for the rFactor 2 simulation, including parameters for rain, cloudiness, temperature, wind, and other environmental factors. public struct WeatherControlInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure is used to define weather conditions and their effects on the simulation environment. It includes parameters for rain intensity at specific nodes, cloudiness, ambient temperature, wind speed, and other settings. The weather changes are typically interpolated over time to ensure smooth transitions, such as clouds rolling in before rain starts. Sudden changes in weather parameters may result in unrealistic visual effects. Fields AmbientTempK Ambient temperature in Kelvin. public double AmbientTempK Field Value double ApplyCloudinessInstantly Gets or sets a value indicating whether cloudiness changes are applied instantly. public bool ApplyCloudinessInstantly Field Value bool Cloudiness General cloudiness in the simulation environment. public double Cloudiness Field Value double ET When you want this weather to take effect. public double ET Field Value double Expansion For future use. public byte[] Expansion Field Value byte[] Raining Represents the rain intensity at different nodes in the simulation environment. public double[] Raining Field Value double[] Unused1 unused public bool Unused1 Field Value bool Unused2 unused public bool Unused2 Field Value bool Unused3 unused public bool Unused3 Field Value bool WindMaxSpeed Wind max speed public double WindMaxSpeed Field Value double"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.Wheel.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.Wheel.html",
    "title": "Struct Wheel | rF2SharedMemoryNet",
    "summary": "Struct Wheel Namespace rF2SharedMemoryNet.RF2Data.Structs Assembly rF2SharedMemoryNet.dll Represents detailed telemetry data for a single wheel in the rFactor 2 simulation. public struct Wheel Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This structure provides various physical and dynamic properties of a wheel, including suspension deflection, ride height, forces, velocities, temperatures, and more. It is primarily used for analyzing wheel behavior and performance in the simulation environment. Fields BrakePressure Normalized brake pressure, currently 0.0-1.0, depending on driver input and brake balance. public double BrakePressure Field Value double BrakeTemp Brake temperature in celsius public double BrakeTemp Field Value double Camber Camber angle in radians public double Camber Field Value double Remarks Positive is left for left-side wheels, right for right-side wheels Detached Is wheel detached. public byte Detached Field Value byte Flat Is tyre flat. public byte Flat Field Value byte GripFract Fraction of the contact patch that is sliding public double GripFract Field Value double LateralForce Lateral force in newtons public double LateralForce Field Value double LateralGroundVel Lateral ground velocity at contact patch public double LateralGroundVel Field Value double LateralPatchVel Lateral velocity at contact patch public double LateralPatchVel Field Value double LongitudinalForce Longitudinal force in newtons public double LongitudinalForce Field Value double LongitudinalGroundVel Longitudinal ground velocity at contact patch public double LongitudinalGroundVel Field Value double LongitudinalPatchVel longitudinal velocity at contact patch public double LongitudinalPatchVel Field Value double Pressure Tyre pressure in kPa public double Pressure Field Value double RideHeight Ride height in meters public double RideHeight Field Value double Rotation Rotation speed in radians per second public double Rotation Field Value double StaticUndeflectedRadius Tyre radius in centimeters. public byte StaticUndeflectedRadius Field Value byte SurfaceType Surface type under the wheel public byte SurfaceType Field Value byte Remarks See SurfaceType for possible values. SuspForce Pushrod load in newtons public double SuspForce Field Value double SuspensionDeflection Suspension deflection in meters public double SuspensionDeflection Field Value double Temperature Tyre temperature in Kelvin public double[] Temperature Field Value double[] Remarks Layout is left/center/right TerrainName Terrain name public byte[] TerrainName Field Value byte[] Remarks A 16-byte array containing the terrain name, which is a prefix from the TDF file. Toe Toe angle with relation to vehicle public double Toe Field Value double TyreCarcassTemperature Represents the rough average temperature of tyre carcass samples, measured in Kelvin. public double TyreCarcassTemperature Field Value double TyreInnerLayerTemperature Rough average of temperature samples from the innermost layer of rubber (before carcass), measured in Kelvin. public double[] TyreInnerLayerTemperature Field Value double[] TyreLoad Tyre load in newtons public double TyreLoad Field Value double VerticalTyreDeflection Represents the vertical deflection of a tyre from its speed-sensitive radius. public double VerticalTyreDeflection Field Value double Wear Tyre wear in fraction public double Wear Field Value double mWheelYLocation Wheel's y location relative to the vehicle's y location. public double mWheelYLocation Field Value double"
  },
  "api/rF2SharedMemoryNet.RF2Data.Structs.html": {
    "href": "api/rF2SharedMemoryNet.RF2Data.Structs.html",
    "title": "Namespace rF2SharedMemoryNet.RF2Data.Structs | rF2SharedMemoryNet",
    "summary": "Namespace rF2SharedMemoryNet.RF2Data.Structs Structs ExtendedTelemetry Represents the extended data structure for rFactor 2, providing detailed information about the simulation state, session transitions, plugin configurations, and various control inputs. ForceFeedback Represents the force feedback data structure used in rFactor 2. Graphics Represents the graphics data structure used in rFactor 2, containing versioning information and detailed graphics settings. GraphicsInfo Represents graphical information related to the rFactor 2 simulation, including camera position, orientation, ambient lighting, and other visual settings. HardwareControl Represents a hardware control structure used for communication between rFactor 2 and external systems. MappedBufferVersionBlock Represents a version block used to track the state of a mapped buffer during updates. MappedBufferVersionBlockWithSize Represents a version block with size information for a mapped buffer, used to track updates to the buffer. PhysicsOptions Represents the configuration options for physics and driving aids in rFactor 2. PitInfo Represents information related to pit operations in rFactor 2, including versioning and pit menu details. PitMenu Represents the current state of the pit menu in rFactor 2, including category and choice information. PluginControl Represents the control structure used for communication between the rFactor 2 plugin and the simulation. Rules Represents the rules and state information for the rFactor 2 simulation, including track rules, actions, and participants. RulesControl Represents the control structure for managing track rules and participants in rFactor2. Scoring Represents the scoring data structure used in rFactor 2 to provide information about the current race session, including scoring details and vehicle-specific scoring data. ScoringInfo Represents scoring information for a session in rFactor 2, including track details, session timing, weather conditions, and multiplayer settings. SessionTransitionCapture Represents a snapshot of session transition data in rFactor 2, including game phase, session information, and scoring details for vehicles. Telemetry Represents telemetry data for rFactor 2, including information about vehicles and update status. TrackRules Represents the rules and state information for a racing track in rFactor 2. TrackRulesAction Represents an action related to track rules in rFactor 2, including a recommended command, slot ID, and elapsed time of the event. TrackRulesParticipant Represents a participant in track rules management for a racing simulation, including information about position, status, and rules compliance. TrackedDamage Represents damage tracking data for a racing session, including maximum and accumulated impact magnitudes. Vec3 Represents a three-dimensional vector with double-precision floating-point components. VehicleScoring Represents detailed scoring and telemetry data for a vehicle in rFactor 2. VehicleScoringCapture Represents the scoring information for a vehicle in rFactor 2, including its position, player status, and finish status. VehicleTelemetry Represents telemetry data for a vehicle in rFactor 2, including positional, orientation, vehicle status, driver input, aerodynamics, and other detailed metrics. Weather Represents weather-related data and control information for the RF2 simulation. WeatherControl Represents the weather control data structure used in RF2 simulations. WeatherControlInfo Represents weather control information for the rFactor 2 simulation, including parameters for rain, cloudiness, temperature, wind, and other environmental factors. Wheel Represents detailed telemetry data for a single wheel in the rFactor 2 simulation."
  },
  "api/rF2SharedMemoryNet.RF2MemoryReader.html": {
    "href": "api/rF2SharedMemoryNet.RF2MemoryReader.html",
    "title": "Class RF2MemoryReader | rF2SharedMemoryNet",
    "summary": "Class RF2MemoryReader Namespace rF2SharedMemoryNet Assembly rF2SharedMemoryNet.dll Provides functionality to read various types of data from memory-mapped files used by rFactor2. public sealed class RF2MemoryReader : IDisposable Inheritance object RF2MemoryReader Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks The RF2MemoryReader class is designed to interface with rFactor2's shared memory plugin, allowing access to telemetry, scoring, rules, force feedback, graphics, pit information, weather, and other data. It attempts to open the necessary memory-mapped files upon instantiation and provides methods to read data synchronously and asynchronously. The class implements IDisposable to ensure proper release of resources. Important: Always call Dispose() when you are done using this class to release memory-mapped file resources. If you need to read data from a new instance, create a new RF2MemoryReader object. Constructors RF2MemoryReader(ILogger?, bool) Initializes a new instance of the RF2MemoryReader class, which reads memory-mapped files for rFactor2 or Le Mans Ultimate telemetry data. public RF2MemoryReader(ILogger? logger = null, bool enableDMA = false) Parameters logger ILogger An optional logger for capturing error messages and operational logs. Can be null if logging is not required. enableDMA bool A boolean value indicating whether to enable Direct Memory Access (DMA) for reading data. If true, attempts to initialize the LMU Memory Reader. Remarks This constructor attempts to open several memory-mapped files required for reading telemetry and other data from the rFactor2 or Le Mans Ultimate game. If the game is not running or the necessary plugins are not installed, errors will be logged if a logger is provided. Exceptions InvalidOperationException Thrown if the LMU Memory Reader fails to initialize when enableDMA is true. Ensure the game is running and the LMU plugin is installed. Properties IsDisposed Gets a value indicating whether the object has been disposed. public bool IsDisposed { get; } Property Value bool Methods Dispose() Disposes of the resources used by the RF2MemoryReader. public void Dispose() Remarks Important: Call this method when you are done using the RF2MemoryReader to release memory-mapped file resources. Failure to do so may result in resource leaks. If you need to read data from a new instance, create a new RF2MemoryReader object after disposing of the current one. GetExtended() Retrieves the extended telemetry data. public ExtendedTelemetry? GetExtended() Returns ExtendedTelemetry? An instance of ExtendedTelemetry containing the extended telemetry data, or null if the data is unavailable. GetExtendedAsync(CancellationToken) Asynchronously retrieves extended telemetry data. public Task<ExtendedTelemetry?> GetExtendedAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<ExtendedTelemetry?> A task that represents the asynchronous operation. The task result contains the extended telemetry data, or null if the data is not available. Remarks This method fetches data from a predefined source and returns it as an ExtendedTelemetry object. The operation can be canceled by passing a cancellation token. GetForceFeedback() Retrieves the force feedback configuration data. public ForceFeedback? GetForceFeedback() Returns ForceFeedback? An instance of ForceFeedback containing the configuration data, or null if the data is unavailable. GetForceFeedbackAsync(CancellationToken) Asynchronously retrieves the force feedback data. public Task<ForceFeedback?> GetForceFeedbackAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<ForceFeedback?> A task that represents the asynchronous operation. The task result contains the force feedback data, or null if the data is not available. GetGraphics() Retrieves the graphics data from the specified graphics file. public Graphics? GetGraphics() Returns Graphics? An instance of Graphics containing the graphics data, or null if the data cannot be retrieved. GetGraphicsAsync(CancellationToken) Asynchronously retrieves graphics data from a specified source. public Task<Graphics?> GetGraphicsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<Graphics?> A task that represents the asynchronous operation. The task result contains the graphics data if available; otherwise, null. Remarks This method fetches graphics data asynchronously and can be canceled using the provided cancellationToken. GetHWControl() Retrieves the hardware control configuration from the specified data source. public HardwareControl? GetHWControl() Returns HardwareControl? An instance of HardwareControl representing the current hardware control settings, or null if the configuration cannot be retrieved. GetHWControlAsync(CancellationToken) Asynchronously retrieves the hardware control configuration. public Task<HardwareControl?> GetHWControlAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<HardwareControl?> A task that represents the asynchronous operation. The task result contains the hardware control configuration, or null if the configuration is not available. GetLMUElectronics() Retrieves the electronics configuration from the LMU memory reader. public Electronics GetLMUElectronics() Returns Electronics The Electronics object representing the current configuration of car electronics. Exceptions InvalidOperationException Thrown if the LMU memory reader is not initialized. Ensure that the DMA is enabled when creating this object. GetPitInfo() Retrieves information about the pit from a data source. public PitInfo? GetPitInfo() Returns PitInfo? An instance of PitInfo containing the pit details, or null if the data is unavailable. GetPitInfoAsync(CancellationToken) Asynchronously retrieves the pit information from the specified data source. public Task<PitInfo?> GetPitInfoAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<PitInfo?> A task that represents the asynchronous operation. The task result contains the PitInfo object if the data is successfully retrieved; otherwise, null. Remarks This method fetches the pit information using an asynchronous operation. It is designed to be non-blocking and can be cancelled by passing a cancellation token. GetPluginControl() Retrieves the plugin control configuration. public PluginControl? GetPluginControl() Returns PluginControl? An instance of PluginControl representing the plugin control configuration, or null if the configuration is not available. GetPluginControlAsync(CancellationToken) Asynchronously retrieves the plugin control data. public Task<PluginControl?> GetPluginControlAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<PluginControl?> A task that represents the asynchronous operation. The task result contains the PluginControl object if available; otherwise, null. Remarks This method fetches the plugin control data from a predefined source. If the data is not available, the method returns null. GetRules() Retrieves the rules configuration from the specified data source. public Rules? GetRules() Returns Rules? An instance of Rules containing the rules configuration, or null if the rules cannot be retrieved. GetRulesAsync(CancellationToken) Asynchronously retrieves the rules from the specified data source. public Task<Rules?> GetRulesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<Rules?> A task that represents the asynchronous operation. The task result contains the retrieved Rules object, or null if the rules cannot be found. Remarks This method fetches the rules data asynchronously, allowing for cancellation through the provided cancellationToken. GetRulesControl() Retrieves the RulesControl object from the specified data source. public RulesControl? GetRulesControl() Returns RulesControl? An instance of RulesControl if the data is successfully retrieved; otherwise, null. Remarks This method attempts to load the RulesControl from a predefined file. If the file does not exist or the data cannot be parsed, the method returns null. GetRulesControlAsync(CancellationToken) Asynchronously retrieves the rules control data. public Task<RulesControl?> GetRulesControlAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<RulesControl?> A task that represents the asynchronous operation. The task result contains the RulesControl object if available; otherwise, null. GetScoring() Retrieves the scoring data from the specified scoring file. public Scoring? GetScoring() Returns Scoring? An instance of Scoring containing the scoring data, or null if the data cannot be retrieved. GetScoringAsync(CancellationToken) Asynchronously retrieves the scoring data. public Task<Scoring?> GetScoringAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<Scoring?> A task representing the asynchronous operation. The task result contains the scoring data, or null if the data is not available. GetTelemetry() Retrieves the telemetry data from the specified file. public Telemetry? GetTelemetry() Returns Telemetry? An instance of Telemetry containing the telemetry data if available; otherwise, null. Remarks This method attempts to read telemetry data from a predefined file. If the file does not exist or the data cannot be read, the method returns null. GetTelemetryAsync(CancellationToken) Asynchronously retrieves telemetry data from a specified source. public Task<Telemetry?> GetTelemetryAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<Telemetry?> A task that represents the asynchronous operation. The task result contains the telemetry data, or null if no data is available. Remarks This method fetches telemetry data, which may include performance metrics or usage statistics, from a predefined source. The operation can be canceled by passing a cancellation token. GetWeather() Retrieves the current weather data. public Weather? GetWeather() Returns Weather? An instance of Weather containing the current weather information, or null if the data is unavailable. GetWeatherAsync(CancellationToken) Asynchronously retrieves the current weather data. public Task<Weather?> GetWeatherAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<Weather?> A task representing the asynchronous operation. The task result contains the current weather data, or null if the data is unavailable. Remarks This method fetches weather data from a predefined source. It supports cancellation through the provided cancellationToken. GetWeatherControl() Retrieves the current weather control settings. public WeatherControl? GetWeatherControl() Returns WeatherControl? An instance of WeatherControl representing the current weather control settings, or null if the settings cannot be retrieved. GetWeatherControlAsync(CancellationToken) Asynchronously retrieves the current weather control settings. public Task<WeatherControl?> GetWeatherControlAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. The default value is None. Returns Task<WeatherControl?> A task that represents the asynchronous operation. The task result contains the current WeatherControl settings, or null if the settings could not be retrieved. Remarks This method fetches the weather control data from a predefined source. If the operation is canceled, the task will be completed with a TaskCanceledException."
  },
  "api/rF2SharedMemoryNet.html": {
    "href": "api/rF2SharedMemoryNet.html",
    "title": "Namespace rF2SharedMemoryNet | rF2SharedMemoryNet",
    "summary": "Namespace rF2SharedMemoryNet Classes FileOperationFailedEventArgs Provides data for the event that is raised when a file read operation fails. RF2MemoryReader Provides functionality to read various types of data from memory-mapped files used by rFactor2. Enums FileOperationFailType Specifies the types of failures that can occur during file operations."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the docs page for rF2SharedMemoryNet. | rF2SharedMemoryNet",
    "summary": "This is the docs page for rF2SharedMemoryNet. You can jump straight to API if you know what your looking for. Or use search for specific telemetry property. This project is meant to give you read access to all the data exposed by rFactor 2 shared memory files. It additionally adds some Le Mans Ultimate telemetry that's not available through shared memory. Le Mans Ultimate telemetry depends on accessing LMU process memory. There is potential that it will break in with next updates. It is not officially supported so if memory layout changes or they implement anti-cheat it might break. Prerequisites For this to work it depends on rFactor2 or Le Mans Ultimate to have rFactor2SharedMemoryMapPlugin64.dll enabled. .net 8.0 Quick start Instalation NuGet You can install this through NuGet this is the easiet way to access the functionality of this package. nuget install rF2SharedMemoryNet GitHub Release You can download a dll from the releases of this repository. Build You can clone the github repo and build it yourself. git clone https://github.com/Domaslau/rF2SharedMemoryNet.git Simple Example Here is a simple example of how to retrieve telemetry data of player vehicle. using rF2SharedMemoryNet; using rF2SharedMemoryNet.RF2Data.Enums; using rF2SharedMemoryNet.RF2Data.Structs; namespace MyApplication{ [SupportedOSPlatform(\"windows\")] public class MyMemoryReader { private readonly RF2MemoryReader MemoryReader; public MyMemoryReader() { MemoryReader = new(); } public async Task<VehicleTelemetry?> ReadAsyncTelemetry() { var telemetry = await MemoryReader.GetTelemetryAsync(); var scoring = await MemoryReader.GetScoringAsync(); if ((telemetry == null) || (scoring == null)) { return null; } var playerVehicle = scoring.Value.Vehicles.First(vehicle => (ControlEntity)vehicle.Control == ControlEntity.Player); var playerTelemetry = telemetry.Value.Vehicles.First(vehicle => vehicle.ID == playerVehicle.ID); return playerTelemetry; } public void Close() { MemoryReader.Dispose(); } } } LMU Electronics Example Here is an example with LMU electronics data. using rF2SharedMemoryNet; using rF2SharedMemoryNet.RF2Data.Enums; using rF2SharedMemoryNet.LMUData.Models; namespace MyApplication{ [SupportedOSPlatform(\"windows\")] public class MyMemoryReader { private readonly RF2MemoryReader MemoryReader; public MyMemoryReader() { MemoryReader = new(enableDMA:true); // Need to set this to true to initialize LMU memory reader. } public Electronics ReadElectronics() { return MemoryReader.GetLMUElectronics(); } public void Close() { MemoryReader.Dispose(); } } } Other Info For all of the methods reffer to API page."
  }
}